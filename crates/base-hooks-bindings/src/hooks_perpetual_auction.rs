/**

Generated by the following Solidity interface...
```solidity
interface HooksPerpetualAuction {
    struct Hook {
        address owner;
        address entrypoint;
        uint256 feePerCall;
        uint256 deposit;
        uint256 callsRemaining;
    }

    error InsufficientBid();
    error InsufficientDeposit();
    error InvalidCallsAmount();
    error InvalidOriginatorShare();
    error NoAuctionExists();
    error NoExcessETH();
    error OnlyOwnerCanWithdraw();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error ReentrancyGuardReentrantCall();

    event DepositWithdrawn(address indexed contractAddr, bytes32 indexed topic0, address indexed owner, uint256 amount);
    event ExcessETHWithdrawn(address indexed owner, uint256 amount);
    event HookExecuted(address indexed contractAddr, bytes32 indexed topic0, address indexed owner, address originator, uint256 feePerCall, uint256 originatorRefund);
    event NewBid(address indexed contractAddr, bytes32 indexed topic0, address indexed bidder, address entrypoint, uint256 feePerCall, uint256 callsDeposited);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor();

    receive() external payable;

    function MAX_ORIGINATOR_SHARE() external view returns (uint256);
    function MIN_CALLS_DEPOSIT() external view returns (uint256);
    function addDeposit(address contractAddr, bytes32 topic0, uint256 additionalCalls) external payable;
    function bid(address contractAddr, bytes32 topic0, address entrypoint, uint256 feePerCall, uint256 callsToDeposit) external payable;
    function executeHook(address contractAddr, bytes32 topic0, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory eventData, address originator) external;
    function getExcessETH() external view returns (uint256);
    function getHook(address contractAddr, bytes32 topic0) external view returns (Hook memory);
    function hookGasStipend() external view returns (uint256);
    function hooks(address, bytes32) external view returns (address owner, address entrypoint, uint256 feePerCall, uint256 deposit, uint256 callsRemaining);
    function originatorShareBps() external view returns (uint256);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function setHookGasStipend(uint256 newGasStipend) external;
    function setOriginatorShare(uint256 newShareBps) external;
    function totalReservedETH() external view returns (uint256);
    function transferOwnership(address newOwner) external;
    function withdrawDeposit(address contractAddr, bytes32 topic0) external;
    function withdrawExcessETH() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "MAX_ORIGINATOR_SHARE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MIN_CALLS_DEPOSIT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addDeposit",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "additionalCalls",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bid",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "entrypoint",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feePerCall",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "callsToDeposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeHook",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "topic1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "topic2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "topic3",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "eventData",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getExcessETH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getHook",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct HooksPerpetualAuction.Hook",
        "components": [
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "entrypoint",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "feePerCall",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deposit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "callsRemaining",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hookGasStipend",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hooks",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "entrypoint",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feePerCall",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deposit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "callsRemaining",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "originatorShareBps",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setHookGasStipend",
    "inputs": [
      {
        "name": "newGasStipend",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setOriginatorShare",
    "inputs": [
      {
        "name": "newShareBps",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "totalReservedETH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "withdrawDeposit",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "withdrawExcessETH",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DepositWithdrawn",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ExcessETHWithdrawn",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "HookExecuted",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "feePerCall",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "originatorRefund",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewBid",
    "inputs": [
      {
        "name": "contractAddr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "topic0",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "bidder",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "entrypoint",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "feePerCall",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "callsDeposited",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InsufficientBid",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCallsAmount",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidOriginatorShare",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoAuctionExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoExcessETH",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyOwnerCanWithdraw",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HooksPerpetualAuction {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040526107d0600455620f42406005553480156200001d575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000092575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000899190620001b5565b60405180910390fd5b620000a381620000b160201b60201c565b5060018081905550620001d0565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200019d8262000172565b9050919050565b620001af8162000191565b82525050565b5f602082019050620001ca5f830184620001a4565b92915050565b611ed180620001de5f395ff3fe60806040526004361061010c575f3560e01c80637e3c64f011610094578063ad77bd1411610063578063ad77bd1414610313578063e8f0a1431461033d578063ee5a3b9814610379578063f13a370814610395578063f2fde38b146103bd57610113565b80637e3c64f01461027f5780638da5cb5b146102a957806392adbd0b146102d35780639cebf9c5146102fd57610113565b8063620ade53116100db578063620ade53146101d157806366c9018d146101ed578063672b5bae14610215578063715018a61461023f57806377f129881461025557610113565b806309345568146101175780631a7fbeab14610157578063241456b6146101815780635c054d22146101a957610113565b3661011357005b5f80fd5b348015610122575f80fd5b5061013d600480360381019061013891906117d1565b6103e5565b60405161014e959493929190611836565b60405180910390f35b348015610162575f80fd5b5061016b610460565b6040516101789190611887565b60405180910390f35b34801561018c575f80fd5b506101a760048036038101906101a291906117d1565b610465565b005b3480156101b4575f80fd5b506101cf60048036038101906101ca9190611901565b6106e5565b005b6101eb60048036038101906101e691906119e8565b610b96565b005b3480156101f8575f80fd5b50610213600480360381019061020e9190611a38565b610d79565b005b348015610220575f80fd5b50610229610dc7565b6040516102369190611887565b60405180910390f35b34801561024a575f80fd5b50610253610dcd565b005b348015610260575f80fd5b50610269610de0565b6040516102769190611887565b60405180910390f35b34801561028a575f80fd5b50610293610de6565b6040516102a09190611887565b60405180910390f35b3480156102b4575f80fd5b506102bd610dec565b6040516102ca9190611a63565b60405180910390f35b3480156102de575f80fd5b506102e7610e13565b6040516102f49190611887565b60405180910390f35b348015610308575f80fd5b50610311610e19565b005b34801561031e575f80fd5b50610327610f23565b6040516103349190611887565b60405180910390f35b348015610348575f80fd5b50610363600480360381019061035e91906117d1565b610f4c565b6040516103709190611b00565b60405180910390f35b610393600480360381019061038e9190611b19565b61107a565b005b3480156103a0575f80fd5b506103bb60048036038101906103b69190611a38565b6114b2565b005b3480156103c8575f80fd5b506103e360048036038101906103de9190611b90565b6114c4565b005b6002602052815f5260405f20602052805f5260405f205f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b606481565b61046d611548565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610543576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f8111156106d7575f82600301819055505f82600401819055508060035f8282546105769190611be8565b9250508190555060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561066f573d5f803e3d5ffd5b503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f8100ef1b878b0dea0b5d4d77906f852e9bc108115bf723dc05b6482f3816e2e0846040516106ce9190611887565b60405180910390a45b50506106e161158e565b5050565b6106ed611548565b5f60025f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8981526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107c3576040517f8ed1f9fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816004015403610800576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61271060045483600201546108169190611c1b565b6108209190611c89565b90505f8183600201546108339190611be8565b90505f8211801561087057505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156108ba578373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156108b8573d5f803e3d5ffd5b505b5f836001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166005548d8d8d8d8d8d8d6040516024016109159796959493929190611d22565b6040516020818303038152906040527f3ea6f207000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161099f9190611df6565b5f604051808303815f8787f1925050503d805f81146109d9576040519150601f19603f3d011682016040523d82523d5f602084013e6109de565b606091505b505090508360020154846003015f8282546109f99190611be8565b92505081905550836004015f815480929190610a1490611e0c565b91905055505f846004015403610ad45760025f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550505b836002015460035f828254610ae99190611be8565b92505081905550835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167ff4a63741664d34e32b8e8ad769cc5c8b8bc926a67396287058e81f04a9491a1488886002015488604051610b7893929190611e33565b60405180910390a450505050610b8c61158e565b5050505050505050565b610b9e611548565b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828260020154610c859190611c1b565b905080341015610cc1576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826003015f828254610cd49190611e68565b9250508190555082826004015f828254610cee9190611e68565b925050819055508060035f828254610d069190611e68565b925050819055505f8134610d1a9190611be8565b90505f811115610d69573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610d67573d5f803e3d5ffd5b505b505050610d7461158e565b505050565b610d81611597565b612710811115610dbd576040517f9cc70d2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050565b60055481565b610dd5611597565b610dde5f61161e565b565b60035481565b61271081565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b610e21611597565b610e29611548565b5f4790505f60035482610e3c9190611be8565b90505f8103610e77576040517f3c80eb2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e7f610dec565b73ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610ec1573d5f803e3d5ffd5b50610eca610dec565b73ffffffffffffffffffffffffffffffffffffffff167f4059819e9daa60a4197f33798ca2bb6443c5fbb67c30aa4f0afeb74c1fbd0fa682604051610f0f9190611887565b60405180910390a25050610f2161158e565b565b5f804790506003548111610f37575f610f46565b60035481610f459190611be8565b5b91505090565b610f546116e6565b60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905092915050565b611082611548565b60648110156110bd576040517f36d950a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81836110ca9190611c1b565b905080341015611106576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461127857806002015484116111e7576040517f918678cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f811115611276578060035f8282546112089190611be8565b92505081905550815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611274573d5f803e3d5ffd5b505b505b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018381526020018481525060025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401559050508160035f8282546113d39190611e68565b925050819055505f82346113e79190611be8565b90505f811115611436573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611434573d5f803e3d5ffd5b505b3373ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167fe83091abe2d76dc884196df13280bd634bc756799303ff28e248aacd351089c689898960405161149893929190611e33565b60405180910390a45050506114ab61158e565b5050505050565b6114ba611597565b8060058190555050565b6114cc611597565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361153c575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016115339190611a63565b60405180910390fd5b6115458161161e565b50565b600260015403611584576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b61159f6116df565b73ffffffffffffffffffffffffffffffffffffffff166115bd610dec565b73ffffffffffffffffffffffffffffffffffffffff161461161c576115e06116df565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116139190611a63565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61176d82611744565b9050919050565b61177d81611763565b8114611787575f80fd5b50565b5f8135905061179881611774565b92915050565b5f819050919050565b6117b08161179e565b81146117ba575f80fd5b50565b5f813590506117cb816117a7565b92915050565b5f80604083850312156117e7576117e661173c565b5b5f6117f48582860161178a565b9250506020611805858286016117bd565b9150509250929050565b61181881611763565b82525050565b5f819050919050565b6118308161181e565b82525050565b5f60a0820190506118495f83018861180f565b611856602083018761180f565b6118636040830186611827565b6118706060830185611827565b61187d6080830184611827565b9695505050505050565b5f60208201905061189a5f830184611827565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126118c1576118c06118a0565b5b8235905067ffffffffffffffff8111156118de576118dd6118a4565b5b6020830191508360018202830111156118fa576118f96118a8565b5b9250929050565b5f805f805f805f8060e0898b03121561191d5761191c61173c565b5b5f61192a8b828c0161178a565b985050602061193b8b828c016117bd565b975050604061194c8b828c016117bd565b965050606061195d8b828c016117bd565b955050608061196e8b828c016117bd565b94505060a089013567ffffffffffffffff81111561198f5761198e611740565b5b61199b8b828c016118ac565b935093505060c06119ae8b828c0161178a565b9150509295985092959890939650565b6119c78161181e565b81146119d1575f80fd5b50565b5f813590506119e2816119be565b92915050565b5f805f606084860312156119ff576119fe61173c565b5b5f611a0c8682870161178a565b9350506020611a1d868287016117bd565b9250506040611a2e868287016119d4565b9150509250925092565b5f60208284031215611a4d57611a4c61173c565b5b5f611a5a848285016119d4565b91505092915050565b5f602082019050611a765f83018461180f565b92915050565b611a8581611763565b82525050565b611a948161181e565b82525050565b60a082015f820151611aae5f850182611a7c565b506020820151611ac16020850182611a7c565b506040820151611ad46040850182611a8b565b506060820151611ae76060850182611a8b565b506080820151611afa6080850182611a8b565b50505050565b5f60a082019050611b135f830184611a9a565b92915050565b5f805f805f60a08688031215611b3257611b3161173c565b5b5f611b3f8882890161178a565b9550506020611b50888289016117bd565b9450506040611b618882890161178a565b9350506060611b72888289016119d4565b9250506080611b83888289016119d4565b9150509295509295909350565b5f60208284031215611ba557611ba461173c565b5b5f611bb28482850161178a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611bf28261181e565b9150611bfd8361181e565b9250828203905081811115611c1557611c14611bbb565b5b92915050565b5f611c258261181e565b9150611c308361181e565b9250828202611c3e8161181e565b91508282048414831517611c5557611c54611bbb565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611c938261181e565b9150611c9e8361181e565b925082611cae57611cad611c5c565b5b828204905092915050565b611cc28161179e565b82525050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f611d018385611cc8565b9350611d0e838584611cd8565b611d1783611ce6565b840190509392505050565b5f60c082019050611d355f83018a61180f565b611d426020830189611cb9565b611d4f6040830188611cb9565b611d5c6060830187611cb9565b611d696080830186611cb9565b81810360a0830152611d7c818486611cf6565b905098975050505050505050565b5f81519050919050565b5f81905092915050565b5f5b83811015611dbb578082015181840152602081019050611da0565b5f8484015250505050565b5f611dd082611d8a565b611dda8185611d94565b9350611dea818560208601611d9e565b80840191505092915050565b5f611e018284611dc6565b915081905092915050565b5f611e168261181e565b91505f8203611e2857611e27611bbb565b5b600182039050919050565b5f606082019050611e465f83018661180f565b611e536020830185611827565b611e606040830184611827565b949350505050565b5f611e728261181e565b9150611e7d8361181e565b9250828201905080821115611e9557611e94611bbb565b5b9291505056fea26469706673582212207aab91668e1a239704daebef2fc2fc6947c83aaec0fc69426839dc31354f4d2764736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@Ra\x07\xD0`\x04Ub\x0FB@`\x05U4\x80\x15b\0\0\x1DW_\x80\xFD[P3_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03b\0\0\x92W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01b\0\0\x89\x91\x90b\0\x01\xB5V[`@Q\x80\x91\x03\x90\xFD[b\0\0\xA3\x81b\0\0\xB1` \x1B` \x1CV[P`\x01\x80\x81\x90UPb\0\x01\xD0V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x01\x9D\x82b\0\x01rV[\x90P\x91\x90PV[b\0\x01\xAF\x81b\0\x01\x91V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xCA_\x83\x01\x84b\0\x01\xA4V[\x92\x91PPV[a\x1E\xD1\x80b\0\x01\xDE_9_\xF3\xFE`\x80`@R`\x046\x10a\x01\x0CW_5`\xE0\x1C\x80c~<d\xF0\x11a\0\x94W\x80c\xADw\xBD\x14\x11a\0cW\x80c\xADw\xBD\x14\x14a\x03\x13W\x80c\xE8\xF0\xA1C\x14a\x03=W\x80c\xEEZ;\x98\x14a\x03yW\x80c\xF1:7\x08\x14a\x03\x95W\x80c\xF2\xFD\xE3\x8B\x14a\x03\xBDWa\x01\x13V[\x80c~<d\xF0\x14a\x02\x7FW\x80c\x8D\xA5\xCB[\x14a\x02\xA9W\x80c\x92\xAD\xBD\x0B\x14a\x02\xD3W\x80c\x9C\xEB\xF9\xC5\x14a\x02\xFDWa\x01\x13V[\x80cb\n\xDES\x11a\0\xDBW\x80cb\n\xDES\x14a\x01\xD1W\x80cf\xC9\x01\x8D\x14a\x01\xEDW\x80cg+[\xAE\x14a\x02\x15W\x80cqP\x18\xA6\x14a\x02?W\x80cw\xF1)\x88\x14a\x02UWa\x01\x13V[\x80c\t4Uh\x14a\x01\x17W\x80c\x1A\x7F\xBE\xAB\x14a\x01WW\x80c$\x14V\xB6\x14a\x01\x81W\x80c\\\x05M\"\x14a\x01\xA9Wa\x01\x13V[6a\x01\x13W\0[_\x80\xFD[4\x80\x15a\x01\"W_\x80\xFD[Pa\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x17\xD1V[a\x03\xE5V[`@Qa\x01N\x95\x94\x93\x92\x91\x90a\x186V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01bW_\x80\xFD[Pa\x01ka\x04`V[`@Qa\x01x\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8CW_\x80\xFD[Pa\x01\xA7`\x04\x806\x03\x81\x01\x90a\x01\xA2\x91\x90a\x17\xD1V[a\x04eV[\0[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xCF`\x04\x806\x03\x81\x01\x90a\x01\xCA\x91\x90a\x19\x01V[a\x06\xE5V[\0[a\x01\xEB`\x04\x806\x03\x81\x01\x90a\x01\xE6\x91\x90a\x19\xE8V[a\x0B\x96V[\0[4\x80\x15a\x01\xF8W_\x80\xFD[Pa\x02\x13`\x04\x806\x03\x81\x01\x90a\x02\x0E\x91\x90a\x1A8V[a\ryV[\0[4\x80\x15a\x02 W_\x80\xFD[Pa\x02)a\r\xC7V[`@Qa\x026\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x02Sa\r\xCDV[\0[4\x80\x15a\x02`W_\x80\xFD[Pa\x02ia\r\xE0V[`@Qa\x02v\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8AW_\x80\xFD[Pa\x02\x93a\r\xE6V[`@Qa\x02\xA0\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\xBDa\r\xECV[`@Qa\x02\xCA\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xDEW_\x80\xFD[Pa\x02\xE7a\x0E\x13V[`@Qa\x02\xF4\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x08W_\x80\xFD[Pa\x03\x11a\x0E\x19V[\0[4\x80\x15a\x03\x1EW_\x80\xFD[Pa\x03'a\x0F#V[`@Qa\x034\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03HW_\x80\xFD[Pa\x03c`\x04\x806\x03\x81\x01\x90a\x03^\x91\x90a\x17\xD1V[a\x0FLV[`@Qa\x03p\x91\x90a\x1B\0V[`@Q\x80\x91\x03\x90\xF3[a\x03\x93`\x04\x806\x03\x81\x01\x90a\x03\x8E\x91\x90a\x1B\x19V[a\x10zV[\0[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xBB`\x04\x806\x03\x81\x01\x90a\x03\xB6\x91\x90a\x1A8V[a\x14\xB2V[\0[4\x80\x15a\x03\xC8W_\x80\xFD[Pa\x03\xE3`\x04\x806\x03\x81\x01\x90a\x03\xDE\x91\x90a\x1B\x90V[a\x14\xC4V[\0[`\x02` R\x81_R`@_ ` R\x80_R`@_ _\x91P\x91PP\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x02\x01T\x90\x80`\x03\x01T\x90\x80`\x04\x01T\x90P\x85V[`d\x81V[a\x04ma\x15HV[_`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05CW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x06\xD7W_\x82`\x03\x01\x81\x90UP_\x82`\x04\x01\x81\x90UP\x80`\x03_\x82\x82Ta\x05v\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06oW=_\x80>=_\xFD[P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x81\0\xEF\x1B\x87\x8B\r\xEA\x0B]Mw\x90o\x85.\x9B\xC1\x08\x11[\xF7#\xDC\x05\xB6H/8\x16\xE2\xE0\x84`@Qa\x06\xCE\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA4[PPa\x06\xE1a\x15\x8EV[PPV[a\x06\xEDa\x15HV[_`\x02_\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x89\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x07\xC3W`@Q\x7F\x8E\xD1\xF9\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x04\x01T\x03a\x08\0W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'\x10`\x04T\x83`\x02\x01Ta\x08\x16\x91\x90a\x1C\x1BV[a\x08 \x91\x90a\x1C\x89V[\x90P_\x81\x83`\x02\x01Ta\x083\x91\x90a\x1B\xE8V[\x90P_\x82\x11\x80\x15a\x08pWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\xBAW\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x83\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x08\xB8W=_\x80>=_\xFD[P[_\x83`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T\x8D\x8D\x8D\x8D\x8D\x8D\x8D`@Q`$\x01a\t\x15\x97\x96\x95\x94\x93\x92\x91\x90a\x1D\"V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F>\xA6\xF2\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\t\x9F\x91\x90a\x1D\xF6V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\t\xD9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xDEV[``\x91P[PP\x90P\x83`\x02\x01T\x84`\x03\x01_\x82\x82Ta\t\xF9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83`\x04\x01_\x81T\x80\x92\x91\x90a\n\x14\x90a\x1E\x0CV[\x91\x90PUP_\x84`\x04\x01T\x03a\n\xD4W`\x02_\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x8C\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP[\x83`\x02\x01T`\x03_\x82\x82Ta\n\xE9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8B\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF4\xA67AfM4\xE3+\x8E\x8A\xD7i\xCC\\\x8B\x8B\xC9&\xA6s\x96(pX\xE8\x1F\x04\xA9I\x1A\x14\x88\x88`\x02\x01T\x88`@Qa\x0Bx\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPPa\x0B\x8Ca\x15\x8EV[PPPPPPPPV[a\x0B\x9Ea\x15HV[_`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0CtW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x82`\x02\x01Ta\x0C\x85\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x0C\xC1W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x82`\x03\x01_\x82\x82Ta\x0C\xD4\x91\x90a\x1EhV[\x92PP\x81\x90UP\x82\x82`\x04\x01_\x82\x82Ta\x0C\xEE\x91\x90a\x1EhV[\x92PP\x81\x90UP\x80`\x03_\x82\x82Ta\r\x06\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x814a\r\x1A\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\riW3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\rgW=_\x80>=_\xFD[P[PPPa\rta\x15\x8EV[PPPV[a\r\x81a\x15\x97V[a'\x10\x81\x11\x15a\r\xBDW`@Q\x7F\x9C\xC7\r&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x04\x81\x90UPPV[`\x05T\x81V[a\r\xD5a\x15\x97V[a\r\xDE_a\x16\x1EV[V[`\x03T\x81V[a'\x10\x81V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[`\x04T\x81V[a\x0E!a\x15\x97V[a\x0E)a\x15HV[_G\x90P_`\x03T\x82a\x0E<\x91\x90a\x1B\xE8V[\x90P_\x81\x03a\x0EwW`@Q\x7F<\x80\xEB-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x7Fa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0E\xC1W=_\x80>=_\xFD[Pa\x0E\xCAa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F@Y\x81\x9E\x9D\xAA`\xA4\x19\x7F3y\x8C\xA2\xBBdC\xC5\xFB\xB6|0\xAAO\n\xFE\xB7L\x1F\xBD\x0F\xA6\x82`@Qa\x0F\x0F\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA2PPa\x0F!a\x15\x8EV[V[_\x80G\x90P`\x03T\x81\x11a\x0F7W_a\x0FFV[`\x03T\x81a\x0FE\x91\x90a\x1B\xE8V[[\x91PP\x90V[a\x0FTa\x16\xE6V[`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81R` \x01`\x04\x82\x01T\x81RPP\x90P\x92\x91PPV[a\x10\x82a\x15HV[`d\x81\x10\x15a\x10\xBDW`@Q\x7F6\xD9P\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81\x83a\x10\xCA\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x11\x06W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x87\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12xW\x80`\x02\x01T\x84\x11a\x11\xE7W`@Q\x7F\x91\x86x\xCB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x12vW\x80`\x03_\x82\x82Ta\x12\x08\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x12tW=_\x80>=_\xFD[P[P[`@Q\x80`\xA0\x01`@R\x803s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01\x83\x81R` \x01\x84\x81RP`\x02_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x88\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP` \x82\x01Q\x81`\x01\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01U`\x80\x82\x01Q\x81`\x04\x01U\x90PP\x81`\x03_\x82\x82Ta\x13\xD3\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x824a\x13\xE7\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\x146W3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x144W=_\x80>=_\xFD[P[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xE80\x91\xAB\xE2\xD7m\xC8\x84\x19m\xF12\x80\xBDcK\xC7Vy\x93\x03\xFF(\xE2H\xAA\xCD5\x10\x89\xC6\x89\x89\x89`@Qa\x14\x98\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPa\x14\xABa\x15\x8EV[PPPPPV[a\x14\xBAa\x15\x97V[\x80`\x05\x81\x90UPPV[a\x14\xCCa\x15\x97V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x15<W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x153\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[a\x15E\x81a\x16\x1EV[PV[`\x02`\x01T\x03a\x15\x84W`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02`\x01\x81\x90UPV[`\x01\x80\x81\x90UPV[a\x15\x9Fa\x16\xDFV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\xBDa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x16\x1CWa\x15\xE0a\x16\xDFV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x13\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[`@Q\x80`\xA0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[_\x80\xFD[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x17m\x82a\x17DV[\x90P\x91\x90PV[a\x17}\x81a\x17cV[\x81\x14a\x17\x87W_\x80\xFD[PV[_\x815\x90Pa\x17\x98\x81a\x17tV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x17\xB0\x81a\x17\x9EV[\x81\x14a\x17\xBAW_\x80\xFD[PV[_\x815\x90Pa\x17\xCB\x81a\x17\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x17\xE7Wa\x17\xE6a\x17<V[[_a\x17\xF4\x85\x82\x86\x01a\x17\x8AV[\x92PP` a\x18\x05\x85\x82\x86\x01a\x17\xBDV[\x91PP\x92P\x92\x90PV[a\x18\x18\x81a\x17cV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x180\x81a\x18\x1EV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x18I_\x83\x01\x88a\x18\x0FV[a\x18V` \x83\x01\x87a\x18\x0FV[a\x18c`@\x83\x01\x86a\x18'V[a\x18p``\x83\x01\x85a\x18'V[a\x18}`\x80\x83\x01\x84a\x18'V[\x96\x95PPPPPPV[_` \x82\x01\x90Pa\x18\x9A_\x83\x01\x84a\x18'V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x18\xC1Wa\x18\xC0a\x18\xA0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDEWa\x18\xDDa\x18\xA4V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x18\xFAWa\x18\xF9a\x18\xA8V[[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x19\x1DWa\x19\x1Ca\x17<V[[_a\x19*\x8B\x82\x8C\x01a\x17\x8AV[\x98PP` a\x19;\x8B\x82\x8C\x01a\x17\xBDV[\x97PP`@a\x19L\x8B\x82\x8C\x01a\x17\xBDV[\x96PP``a\x19]\x8B\x82\x8C\x01a\x17\xBDV[\x95PP`\x80a\x19n\x8B\x82\x8C\x01a\x17\xBDV[\x94PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x8FWa\x19\x8Ea\x17@V[[a\x19\x9B\x8B\x82\x8C\x01a\x18\xACV[\x93P\x93PP`\xC0a\x19\xAE\x8B\x82\x8C\x01a\x17\x8AV[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[a\x19\xC7\x81a\x18\x1EV[\x81\x14a\x19\xD1W_\x80\xFD[PV[_\x815\x90Pa\x19\xE2\x81a\x19\xBEV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x19\xFFWa\x19\xFEa\x17<V[[_a\x1A\x0C\x86\x82\x87\x01a\x17\x8AV[\x93PP` a\x1A\x1D\x86\x82\x87\x01a\x17\xBDV[\x92PP`@a\x1A.\x86\x82\x87\x01a\x19\xD4V[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x1AMWa\x1ALa\x17<V[[_a\x1AZ\x84\x82\x85\x01a\x19\xD4V[\x91PP\x92\x91PPV[_` \x82\x01\x90Pa\x1Av_\x83\x01\x84a\x18\x0FV[\x92\x91PPV[a\x1A\x85\x81a\x17cV[\x82RPPV[a\x1A\x94\x81a\x18\x1EV[\x82RPPV[`\xA0\x82\x01_\x82\x01Qa\x1A\xAE_\x85\x01\x82a\x1A|V[P` \x82\x01Qa\x1A\xC1` \x85\x01\x82a\x1A|V[P`@\x82\x01Qa\x1A\xD4`@\x85\x01\x82a\x1A\x8BV[P``\x82\x01Qa\x1A\xE7``\x85\x01\x82a\x1A\x8BV[P`\x80\x82\x01Qa\x1A\xFA`\x80\x85\x01\x82a\x1A\x8BV[PPPPV[_`\xA0\x82\x01\x90Pa\x1B\x13_\x83\x01\x84a\x1A\x9AV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x1B2Wa\x1B1a\x17<V[[_a\x1B?\x88\x82\x89\x01a\x17\x8AV[\x95PP` a\x1BP\x88\x82\x89\x01a\x17\xBDV[\x94PP`@a\x1Ba\x88\x82\x89\x01a\x17\x8AV[\x93PP``a\x1Br\x88\x82\x89\x01a\x19\xD4V[\x92PP`\x80a\x1B\x83\x88\x82\x89\x01a\x19\xD4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_` \x82\x84\x03\x12\x15a\x1B\xA5Wa\x1B\xA4a\x17<V[[_a\x1B\xB2\x84\x82\x85\x01a\x17\x8AV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1B\xF2\x82a\x18\x1EV[\x91Pa\x1B\xFD\x83a\x18\x1EV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1C\x15Wa\x1C\x14a\x1B\xBBV[[\x92\x91PPV[_a\x1C%\x82a\x18\x1EV[\x91Pa\x1C0\x83a\x18\x1EV[\x92P\x82\x82\x02a\x1C>\x81a\x18\x1EV[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x1CUWa\x1CTa\x1B\xBBV[[P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_a\x1C\x93\x82a\x18\x1EV[\x91Pa\x1C\x9E\x83a\x18\x1EV[\x92P\x82a\x1C\xAEWa\x1C\xADa\x1C\\V[[\x82\x82\x04\x90P\x92\x91PPV[a\x1C\xC2\x81a\x17\x9EV[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x1D\x01\x83\x85a\x1C\xC8V[\x93Pa\x1D\x0E\x83\x85\x84a\x1C\xD8V[a\x1D\x17\x83a\x1C\xE6V[\x84\x01\x90P\x93\x92PPPV[_`\xC0\x82\x01\x90Pa\x1D5_\x83\x01\x8Aa\x18\x0FV[a\x1DB` \x83\x01\x89a\x1C\xB9V[a\x1DO`@\x83\x01\x88a\x1C\xB9V[a\x1D\\``\x83\x01\x87a\x1C\xB9V[a\x1Di`\x80\x83\x01\x86a\x1C\xB9V[\x81\x81\x03`\xA0\x83\x01Ra\x1D|\x81\x84\x86a\x1C\xF6V[\x90P\x98\x97PPPPPPPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x1D\xBBW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xA0V[_\x84\x84\x01RPPPPV[_a\x1D\xD0\x82a\x1D\x8AV[a\x1D\xDA\x81\x85a\x1D\x94V[\x93Pa\x1D\xEA\x81\x85` \x86\x01a\x1D\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1E\x01\x82\x84a\x1D\xC6V[\x91P\x81\x90P\x92\x91PPV[_a\x1E\x16\x82a\x18\x1EV[\x91P_\x82\x03a\x1E(Wa\x1E'a\x1B\xBBV[[`\x01\x82\x03\x90P\x91\x90PV[_``\x82\x01\x90Pa\x1EF_\x83\x01\x86a\x18\x0FV[a\x1ES` \x83\x01\x85a\x18'V[a\x1E``@\x83\x01\x84a\x18'V[\x94\x93PPPPV[_a\x1Er\x82a\x18\x1EV[\x91Pa\x1E}\x83a\x18\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\x95Wa\x1E\x94a\x1B\xBBV[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 z\xAB\x91f\x8E\x1A#\x97\x04\xDA\xEB\xEF/\xC2\xFCiG\xC8:\xAE\xC0\xFCiBh9\xDC15OM'dsolcC\0\x08\x14\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\x0CW_5`\xE0\x1C\x80c~<d\xF0\x11a\0\x94W\x80c\xADw\xBD\x14\x11a\0cW\x80c\xADw\xBD\x14\x14a\x03\x13W\x80c\xE8\xF0\xA1C\x14a\x03=W\x80c\xEEZ;\x98\x14a\x03yW\x80c\xF1:7\x08\x14a\x03\x95W\x80c\xF2\xFD\xE3\x8B\x14a\x03\xBDWa\x01\x13V[\x80c~<d\xF0\x14a\x02\x7FW\x80c\x8D\xA5\xCB[\x14a\x02\xA9W\x80c\x92\xAD\xBD\x0B\x14a\x02\xD3W\x80c\x9C\xEB\xF9\xC5\x14a\x02\xFDWa\x01\x13V[\x80cb\n\xDES\x11a\0\xDBW\x80cb\n\xDES\x14a\x01\xD1W\x80cf\xC9\x01\x8D\x14a\x01\xEDW\x80cg+[\xAE\x14a\x02\x15W\x80cqP\x18\xA6\x14a\x02?W\x80cw\xF1)\x88\x14a\x02UWa\x01\x13V[\x80c\t4Uh\x14a\x01\x17W\x80c\x1A\x7F\xBE\xAB\x14a\x01WW\x80c$\x14V\xB6\x14a\x01\x81W\x80c\\\x05M\"\x14a\x01\xA9Wa\x01\x13V[6a\x01\x13W\0[_\x80\xFD[4\x80\x15a\x01\"W_\x80\xFD[Pa\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x17\xD1V[a\x03\xE5V[`@Qa\x01N\x95\x94\x93\x92\x91\x90a\x186V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01bW_\x80\xFD[Pa\x01ka\x04`V[`@Qa\x01x\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8CW_\x80\xFD[Pa\x01\xA7`\x04\x806\x03\x81\x01\x90a\x01\xA2\x91\x90a\x17\xD1V[a\x04eV[\0[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xCF`\x04\x806\x03\x81\x01\x90a\x01\xCA\x91\x90a\x19\x01V[a\x06\xE5V[\0[a\x01\xEB`\x04\x806\x03\x81\x01\x90a\x01\xE6\x91\x90a\x19\xE8V[a\x0B\x96V[\0[4\x80\x15a\x01\xF8W_\x80\xFD[Pa\x02\x13`\x04\x806\x03\x81\x01\x90a\x02\x0E\x91\x90a\x1A8V[a\ryV[\0[4\x80\x15a\x02 W_\x80\xFD[Pa\x02)a\r\xC7V[`@Qa\x026\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x02Sa\r\xCDV[\0[4\x80\x15a\x02`W_\x80\xFD[Pa\x02ia\r\xE0V[`@Qa\x02v\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8AW_\x80\xFD[Pa\x02\x93a\r\xE6V[`@Qa\x02\xA0\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\xBDa\r\xECV[`@Qa\x02\xCA\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xDEW_\x80\xFD[Pa\x02\xE7a\x0E\x13V[`@Qa\x02\xF4\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x08W_\x80\xFD[Pa\x03\x11a\x0E\x19V[\0[4\x80\x15a\x03\x1EW_\x80\xFD[Pa\x03'a\x0F#V[`@Qa\x034\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03HW_\x80\xFD[Pa\x03c`\x04\x806\x03\x81\x01\x90a\x03^\x91\x90a\x17\xD1V[a\x0FLV[`@Qa\x03p\x91\x90a\x1B\0V[`@Q\x80\x91\x03\x90\xF3[a\x03\x93`\x04\x806\x03\x81\x01\x90a\x03\x8E\x91\x90a\x1B\x19V[a\x10zV[\0[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xBB`\x04\x806\x03\x81\x01\x90a\x03\xB6\x91\x90a\x1A8V[a\x14\xB2V[\0[4\x80\x15a\x03\xC8W_\x80\xFD[Pa\x03\xE3`\x04\x806\x03\x81\x01\x90a\x03\xDE\x91\x90a\x1B\x90V[a\x14\xC4V[\0[`\x02` R\x81_R`@_ ` R\x80_R`@_ _\x91P\x91PP\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x02\x01T\x90\x80`\x03\x01T\x90\x80`\x04\x01T\x90P\x85V[`d\x81V[a\x04ma\x15HV[_`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05CW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x06\xD7W_\x82`\x03\x01\x81\x90UP_\x82`\x04\x01\x81\x90UP\x80`\x03_\x82\x82Ta\x05v\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06oW=_\x80>=_\xFD[P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x81\0\xEF\x1B\x87\x8B\r\xEA\x0B]Mw\x90o\x85.\x9B\xC1\x08\x11[\xF7#\xDC\x05\xB6H/8\x16\xE2\xE0\x84`@Qa\x06\xCE\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA4[PPa\x06\xE1a\x15\x8EV[PPV[a\x06\xEDa\x15HV[_`\x02_\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x89\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x07\xC3W`@Q\x7F\x8E\xD1\xF9\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x04\x01T\x03a\x08\0W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'\x10`\x04T\x83`\x02\x01Ta\x08\x16\x91\x90a\x1C\x1BV[a\x08 \x91\x90a\x1C\x89V[\x90P_\x81\x83`\x02\x01Ta\x083\x91\x90a\x1B\xE8V[\x90P_\x82\x11\x80\x15a\x08pWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\xBAW\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x83\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x08\xB8W=_\x80>=_\xFD[P[_\x83`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T\x8D\x8D\x8D\x8D\x8D\x8D\x8D`@Q`$\x01a\t\x15\x97\x96\x95\x94\x93\x92\x91\x90a\x1D\"V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F>\xA6\xF2\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\t\x9F\x91\x90a\x1D\xF6V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\t\xD9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xDEV[``\x91P[PP\x90P\x83`\x02\x01T\x84`\x03\x01_\x82\x82Ta\t\xF9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83`\x04\x01_\x81T\x80\x92\x91\x90a\n\x14\x90a\x1E\x0CV[\x91\x90PUP_\x84`\x04\x01T\x03a\n\xD4W`\x02_\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x8C\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP[\x83`\x02\x01T`\x03_\x82\x82Ta\n\xE9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8B\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF4\xA67AfM4\xE3+\x8E\x8A\xD7i\xCC\\\x8B\x8B\xC9&\xA6s\x96(pX\xE8\x1F\x04\xA9I\x1A\x14\x88\x88`\x02\x01T\x88`@Qa\x0Bx\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPPa\x0B\x8Ca\x15\x8EV[PPPPPPPPV[a\x0B\x9Ea\x15HV[_`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0CtW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x82`\x02\x01Ta\x0C\x85\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x0C\xC1W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x82`\x03\x01_\x82\x82Ta\x0C\xD4\x91\x90a\x1EhV[\x92PP\x81\x90UP\x82\x82`\x04\x01_\x82\x82Ta\x0C\xEE\x91\x90a\x1EhV[\x92PP\x81\x90UP\x80`\x03_\x82\x82Ta\r\x06\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x814a\r\x1A\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\riW3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\rgW=_\x80>=_\xFD[P[PPPa\rta\x15\x8EV[PPPV[a\r\x81a\x15\x97V[a'\x10\x81\x11\x15a\r\xBDW`@Q\x7F\x9C\xC7\r&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x04\x81\x90UPPV[`\x05T\x81V[a\r\xD5a\x15\x97V[a\r\xDE_a\x16\x1EV[V[`\x03T\x81V[a'\x10\x81V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[`\x04T\x81V[a\x0E!a\x15\x97V[a\x0E)a\x15HV[_G\x90P_`\x03T\x82a\x0E<\x91\x90a\x1B\xE8V[\x90P_\x81\x03a\x0EwW`@Q\x7F<\x80\xEB-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x7Fa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0E\xC1W=_\x80>=_\xFD[Pa\x0E\xCAa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F@Y\x81\x9E\x9D\xAA`\xA4\x19\x7F3y\x8C\xA2\xBBdC\xC5\xFB\xB6|0\xAAO\n\xFE\xB7L\x1F\xBD\x0F\xA6\x82`@Qa\x0F\x0F\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA2PPa\x0F!a\x15\x8EV[V[_\x80G\x90P`\x03T\x81\x11a\x0F7W_a\x0FFV[`\x03T\x81a\x0FE\x91\x90a\x1B\xE8V[[\x91PP\x90V[a\x0FTa\x16\xE6V[`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81R` \x01`\x04\x82\x01T\x81RPP\x90P\x92\x91PPV[a\x10\x82a\x15HV[`d\x81\x10\x15a\x10\xBDW`@Q\x7F6\xD9P\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81\x83a\x10\xCA\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x11\x06W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x87\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12xW\x80`\x02\x01T\x84\x11a\x11\xE7W`@Q\x7F\x91\x86x\xCB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x12vW\x80`\x03_\x82\x82Ta\x12\x08\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x12tW=_\x80>=_\xFD[P[P[`@Q\x80`\xA0\x01`@R\x803s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01\x83\x81R` \x01\x84\x81RP`\x02_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x88\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP` \x82\x01Q\x81`\x01\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01U`\x80\x82\x01Q\x81`\x04\x01U\x90PP\x81`\x03_\x82\x82Ta\x13\xD3\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x824a\x13\xE7\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\x146W3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x144W=_\x80>=_\xFD[P[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xE80\x91\xAB\xE2\xD7m\xC8\x84\x19m\xF12\x80\xBDcK\xC7Vy\x93\x03\xFF(\xE2H\xAA\xCD5\x10\x89\xC6\x89\x89\x89`@Qa\x14\x98\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPa\x14\xABa\x15\x8EV[PPPPPV[a\x14\xBAa\x15\x97V[\x80`\x05\x81\x90UPPV[a\x14\xCCa\x15\x97V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x15<W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x153\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[a\x15E\x81a\x16\x1EV[PV[`\x02`\x01T\x03a\x15\x84W`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02`\x01\x81\x90UPV[`\x01\x80\x81\x90UPV[a\x15\x9Fa\x16\xDFV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\xBDa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x16\x1CWa\x15\xE0a\x16\xDFV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x13\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[`@Q\x80`\xA0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[_\x80\xFD[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x17m\x82a\x17DV[\x90P\x91\x90PV[a\x17}\x81a\x17cV[\x81\x14a\x17\x87W_\x80\xFD[PV[_\x815\x90Pa\x17\x98\x81a\x17tV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x17\xB0\x81a\x17\x9EV[\x81\x14a\x17\xBAW_\x80\xFD[PV[_\x815\x90Pa\x17\xCB\x81a\x17\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x17\xE7Wa\x17\xE6a\x17<V[[_a\x17\xF4\x85\x82\x86\x01a\x17\x8AV[\x92PP` a\x18\x05\x85\x82\x86\x01a\x17\xBDV[\x91PP\x92P\x92\x90PV[a\x18\x18\x81a\x17cV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x180\x81a\x18\x1EV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x18I_\x83\x01\x88a\x18\x0FV[a\x18V` \x83\x01\x87a\x18\x0FV[a\x18c`@\x83\x01\x86a\x18'V[a\x18p``\x83\x01\x85a\x18'V[a\x18}`\x80\x83\x01\x84a\x18'V[\x96\x95PPPPPPV[_` \x82\x01\x90Pa\x18\x9A_\x83\x01\x84a\x18'V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x18\xC1Wa\x18\xC0a\x18\xA0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDEWa\x18\xDDa\x18\xA4V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x18\xFAWa\x18\xF9a\x18\xA8V[[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x19\x1DWa\x19\x1Ca\x17<V[[_a\x19*\x8B\x82\x8C\x01a\x17\x8AV[\x98PP` a\x19;\x8B\x82\x8C\x01a\x17\xBDV[\x97PP`@a\x19L\x8B\x82\x8C\x01a\x17\xBDV[\x96PP``a\x19]\x8B\x82\x8C\x01a\x17\xBDV[\x95PP`\x80a\x19n\x8B\x82\x8C\x01a\x17\xBDV[\x94PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x8FWa\x19\x8Ea\x17@V[[a\x19\x9B\x8B\x82\x8C\x01a\x18\xACV[\x93P\x93PP`\xC0a\x19\xAE\x8B\x82\x8C\x01a\x17\x8AV[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[a\x19\xC7\x81a\x18\x1EV[\x81\x14a\x19\xD1W_\x80\xFD[PV[_\x815\x90Pa\x19\xE2\x81a\x19\xBEV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x19\xFFWa\x19\xFEa\x17<V[[_a\x1A\x0C\x86\x82\x87\x01a\x17\x8AV[\x93PP` a\x1A\x1D\x86\x82\x87\x01a\x17\xBDV[\x92PP`@a\x1A.\x86\x82\x87\x01a\x19\xD4V[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x1AMWa\x1ALa\x17<V[[_a\x1AZ\x84\x82\x85\x01a\x19\xD4V[\x91PP\x92\x91PPV[_` \x82\x01\x90Pa\x1Av_\x83\x01\x84a\x18\x0FV[\x92\x91PPV[a\x1A\x85\x81a\x17cV[\x82RPPV[a\x1A\x94\x81a\x18\x1EV[\x82RPPV[`\xA0\x82\x01_\x82\x01Qa\x1A\xAE_\x85\x01\x82a\x1A|V[P` \x82\x01Qa\x1A\xC1` \x85\x01\x82a\x1A|V[P`@\x82\x01Qa\x1A\xD4`@\x85\x01\x82a\x1A\x8BV[P``\x82\x01Qa\x1A\xE7``\x85\x01\x82a\x1A\x8BV[P`\x80\x82\x01Qa\x1A\xFA`\x80\x85\x01\x82a\x1A\x8BV[PPPPV[_`\xA0\x82\x01\x90Pa\x1B\x13_\x83\x01\x84a\x1A\x9AV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x1B2Wa\x1B1a\x17<V[[_a\x1B?\x88\x82\x89\x01a\x17\x8AV[\x95PP` a\x1BP\x88\x82\x89\x01a\x17\xBDV[\x94PP`@a\x1Ba\x88\x82\x89\x01a\x17\x8AV[\x93PP``a\x1Br\x88\x82\x89\x01a\x19\xD4V[\x92PP`\x80a\x1B\x83\x88\x82\x89\x01a\x19\xD4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_` \x82\x84\x03\x12\x15a\x1B\xA5Wa\x1B\xA4a\x17<V[[_a\x1B\xB2\x84\x82\x85\x01a\x17\x8AV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1B\xF2\x82a\x18\x1EV[\x91Pa\x1B\xFD\x83a\x18\x1EV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1C\x15Wa\x1C\x14a\x1B\xBBV[[\x92\x91PPV[_a\x1C%\x82a\x18\x1EV[\x91Pa\x1C0\x83a\x18\x1EV[\x92P\x82\x82\x02a\x1C>\x81a\x18\x1EV[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x1CUWa\x1CTa\x1B\xBBV[[P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_a\x1C\x93\x82a\x18\x1EV[\x91Pa\x1C\x9E\x83a\x18\x1EV[\x92P\x82a\x1C\xAEWa\x1C\xADa\x1C\\V[[\x82\x82\x04\x90P\x92\x91PPV[a\x1C\xC2\x81a\x17\x9EV[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x1D\x01\x83\x85a\x1C\xC8V[\x93Pa\x1D\x0E\x83\x85\x84a\x1C\xD8V[a\x1D\x17\x83a\x1C\xE6V[\x84\x01\x90P\x93\x92PPPV[_`\xC0\x82\x01\x90Pa\x1D5_\x83\x01\x8Aa\x18\x0FV[a\x1DB` \x83\x01\x89a\x1C\xB9V[a\x1DO`@\x83\x01\x88a\x1C\xB9V[a\x1D\\``\x83\x01\x87a\x1C\xB9V[a\x1Di`\x80\x83\x01\x86a\x1C\xB9V[\x81\x81\x03`\xA0\x83\x01Ra\x1D|\x81\x84\x86a\x1C\xF6V[\x90P\x98\x97PPPPPPPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x1D\xBBW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xA0V[_\x84\x84\x01RPPPPV[_a\x1D\xD0\x82a\x1D\x8AV[a\x1D\xDA\x81\x85a\x1D\x94V[\x93Pa\x1D\xEA\x81\x85` \x86\x01a\x1D\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1E\x01\x82\x84a\x1D\xC6V[\x91P\x81\x90P\x92\x91PPV[_a\x1E\x16\x82a\x18\x1EV[\x91P_\x82\x03a\x1E(Wa\x1E'a\x1B\xBBV[[`\x01\x82\x03\x90P\x91\x90PV[_``\x82\x01\x90Pa\x1EF_\x83\x01\x86a\x18\x0FV[a\x1ES` \x83\x01\x85a\x18'V[a\x1E``@\x83\x01\x84a\x18'V[\x94\x93PPPPV[_a\x1Er\x82a\x18\x1EV[\x91Pa\x1E}\x83a\x18\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\x95Wa\x1E\x94a\x1B\xBBV[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 z\xAB\x91f\x8E\x1A#\x97\x04\xDA\xEB\xEF/\xC2\xFCiG\xC8:\xAE\xC0\xFCiBh9\xDC15OM'dsolcC\0\x08\x14\x003",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Hook { address owner; address entrypoint; uint256 feePerCall; uint256 deposit; uint256 callsRemaining; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Hook {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub entrypoint: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub feePerCall: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub callsRemaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Hook> for UnderlyingRustTuple<'_> {
            fn from(value: Hook) -> Self {
                (
                    value.owner,
                    value.entrypoint,
                    value.feePerCall,
                    value.deposit,
                    value.callsRemaining,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Hook {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    owner: tuple.0,
                    entrypoint: tuple.1,
                    feePerCall: tuple.2,
                    deposit: tuple.3,
                    callsRemaining: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Hook {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Hook {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.entrypoint,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feePerCall),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deposit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.callsRemaining),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Hook {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Hook {
            const NAME: &'static str = "Hook";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Hook(address owner,address entrypoint,uint256 feePerCall,uint256 deposit,uint256 callsRemaining)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.owner,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.entrypoint,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feePerCall)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deposit)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callsRemaining,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Hook {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.owner,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.entrypoint,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feePerCall,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deposit,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callsRemaining,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.owner,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.entrypoint,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feePerCall,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deposit,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callsRemaining,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientBid()` and selector `0x918678cb`.
```solidity
error InsufficientBid();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBid;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBid> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBid) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBid {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBid {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBid()";
            const SELECTOR: [u8; 4] = [145u8, 134u8, 120u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientDeposit()` and selector `0x0e1eddda`.
```solidity
error InsufficientDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientDeposit;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientDeposit()";
            const SELECTOR: [u8; 4] = [14u8, 30u8, 221u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidCallsAmount()` and selector `0x36d950a5`.
```solidity
error InvalidCallsAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidCallsAmount;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCallsAmount> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCallsAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCallsAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCallsAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCallsAmount()";
            const SELECTOR: [u8; 4] = [54u8, 217u8, 80u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidOriginatorShare()` and selector `0x9cc70d26`.
```solidity
error InvalidOriginatorShare();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidOriginatorShare;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidOriginatorShare> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidOriginatorShare) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidOriginatorShare {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidOriginatorShare {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidOriginatorShare()";
            const SELECTOR: [u8; 4] = [156u8, 199u8, 13u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoAuctionExists()` and selector `0x8ed1f9fb`.
```solidity
error NoAuctionExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoAuctionExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoAuctionExists> for UnderlyingRustTuple<'_> {
            fn from(value: NoAuctionExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoAuctionExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoAuctionExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoAuctionExists()";
            const SELECTOR: [u8; 4] = [142u8, 209u8, 249u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoExcessETH()` and selector `0x3c80eb2d`.
```solidity
error NoExcessETH();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoExcessETH;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoExcessETH> for UnderlyingRustTuple<'_> {
            fn from(value: NoExcessETH) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoExcessETH {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoExcessETH {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoExcessETH()";
            const SELECTOR: [u8; 4] = [60u8, 128u8, 235u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OnlyOwnerCanWithdraw()` and selector `0x47418db1`.
```solidity
error OnlyOwnerCanWithdraw();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyOwnerCanWithdraw;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyOwnerCanWithdraw> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyOwnerCanWithdraw) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyOwnerCanWithdraw {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyOwnerCanWithdraw {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyOwnerCanWithdraw()";
            const SELECTOR: [u8; 4] = [71u8, 65u8, 141u8, 177u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DepositWithdrawn(address,bytes32,address,uint256)` and selector `0x8100ef1b878b0dea0b5d4d77906f852e9bc108115bf723dc05b6482f3816e2e0`.
```solidity
event DepositWithdrawn(address indexed contractAddr, bytes32 indexed topic0, address indexed owner, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DepositWithdrawn {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DepositWithdrawn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DepositWithdrawn(address,bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                129u8, 0u8, 239u8, 27u8, 135u8, 139u8, 13u8, 234u8, 11u8, 93u8, 77u8,
                119u8, 144u8, 111u8, 133u8, 46u8, 155u8, 193u8, 8u8, 17u8, 91u8, 247u8,
                35u8, 220u8, 5u8, 182u8, 72u8, 47u8, 56u8, 22u8, 226u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contractAddr: topics.1,
                    topic0: topics.2,
                    owner: topics.3,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.contractAddr.clone(),
                    self.topic0.clone(),
                    self.owner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractAddr,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.topic0);
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DepositWithdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DepositWithdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DepositWithdrawn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ExcessETHWithdrawn(address,uint256)` and selector `0x4059819e9daa60a4197f33798ca2bb6443c5fbb67c30aa4f0afeb74c1fbd0fa6`.
```solidity
event ExcessETHWithdrawn(address indexed owner, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ExcessETHWithdrawn {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ExcessETHWithdrawn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ExcessETHWithdrawn(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                64u8, 89u8, 129u8, 158u8, 157u8, 170u8, 96u8, 164u8, 25u8, 127u8, 51u8,
                121u8, 140u8, 162u8, 187u8, 100u8, 67u8, 197u8, 251u8, 182u8, 124u8,
                48u8, 170u8, 79u8, 10u8, 254u8, 183u8, 76u8, 31u8, 189u8, 15u8, 166u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ExcessETHWithdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ExcessETHWithdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ExcessETHWithdrawn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `HookExecuted(address,bytes32,address,address,uint256,uint256)` and selector `0xf4a63741664d34e32b8e8ad769cc5c8b8bc926a67396287058e81f04a9491a14`.
```solidity
event HookExecuted(address indexed contractAddr, bytes32 indexed topic0, address indexed owner, address originator, uint256 feePerCall, uint256 originatorRefund);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct HookExecuted {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub feePerCall: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub originatorRefund: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for HookExecuted {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "HookExecuted(address,bytes32,address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                244u8, 166u8, 55u8, 65u8, 102u8, 77u8, 52u8, 227u8, 43u8, 142u8, 138u8,
                215u8, 105u8, 204u8, 92u8, 139u8, 139u8, 201u8, 38u8, 166u8, 115u8,
                150u8, 40u8, 112u8, 88u8, 232u8, 31u8, 4u8, 169u8, 73u8, 26u8, 20u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contractAddr: topics.1,
                    topic0: topics.2,
                    owner: topics.3,
                    originator: data.0,
                    feePerCall: data.1,
                    originatorRefund: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feePerCall),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originatorRefund),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.contractAddr.clone(),
                    self.topic0.clone(),
                    self.owner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractAddr,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.topic0);
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for HookExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&HookExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &HookExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NewBid(address,bytes32,address,address,uint256,uint256)` and selector `0xe83091abe2d76dc884196df13280bd634bc756799303ff28e248aacd351089c6`.
```solidity
event NewBid(address indexed contractAddr, bytes32 indexed topic0, address indexed bidder, address entrypoint, uint256 feePerCall, uint256 callsDeposited);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewBid {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub bidder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub entrypoint: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub feePerCall: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub callsDeposited: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewBid {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "NewBid(address,bytes32,address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                232u8, 48u8, 145u8, 171u8, 226u8, 215u8, 109u8, 200u8, 132u8, 25u8,
                109u8, 241u8, 50u8, 128u8, 189u8, 99u8, 75u8, 199u8, 86u8, 121u8, 147u8,
                3u8, 255u8, 40u8, 226u8, 72u8, 170u8, 205u8, 53u8, 16u8, 137u8, 198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contractAddr: topics.1,
                    topic0: topics.2,
                    bidder: topics.3,
                    entrypoint: data.0,
                    feePerCall: data.1,
                    callsDeposited: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.entrypoint,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feePerCall),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.callsDeposited),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.contractAddr.clone(),
                    self.topic0.clone(),
                    self.bidder.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractAddr,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.topic0);
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bidder,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewBid {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewBid> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewBid) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MAX_ORIGINATOR_SHARE()` and selector `0x7e3c64f0`.
```solidity
function MAX_ORIGINATOR_SHARE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_ORIGINATOR_SHARECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MAX_ORIGINATOR_SHARE()`](MAX_ORIGINATOR_SHARECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_ORIGINATOR_SHAREReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_ORIGINATOR_SHARECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_ORIGINATOR_SHARECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_ORIGINATOR_SHARECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_ORIGINATOR_SHAREReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_ORIGINATOR_SHAREReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_ORIGINATOR_SHAREReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_ORIGINATOR_SHARECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_ORIGINATOR_SHARE()";
            const SELECTOR: [u8; 4] = [126u8, 60u8, 100u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MAX_ORIGINATOR_SHAREReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MAX_ORIGINATOR_SHAREReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MIN_CALLS_DEPOSIT()` and selector `0x1a7fbeab`.
```solidity
function MIN_CALLS_DEPOSIT() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MIN_CALLS_DEPOSITCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MIN_CALLS_DEPOSIT()`](MIN_CALLS_DEPOSITCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MIN_CALLS_DEPOSITReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MIN_CALLS_DEPOSITCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MIN_CALLS_DEPOSITCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MIN_CALLS_DEPOSITCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MIN_CALLS_DEPOSITReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MIN_CALLS_DEPOSITReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MIN_CALLS_DEPOSITReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MIN_CALLS_DEPOSITCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MIN_CALLS_DEPOSIT()";
            const SELECTOR: [u8; 4] = [26u8, 127u8, 190u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MIN_CALLS_DEPOSITReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MIN_CALLS_DEPOSITReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addDeposit(address,bytes32,uint256)` and selector `0x620ade53`.
```solidity
function addDeposit(address contractAddr, bytes32 topic0, uint256 additionalCalls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addDepositCall {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub additionalCalls: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addDeposit(address,bytes32,uint256)`](addDepositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addDepositReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addDepositCall> for UnderlyingRustTuple<'_> {
                fn from(value: addDepositCall) -> Self {
                    (value.contractAddr, value.topic0, value.additionalCalls)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addDepositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contractAddr: tuple.0,
                        topic0: tuple.1,
                        additionalCalls: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addDepositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addDepositReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addDepositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addDepositReturn {
            fn _tokenize(
                &self,
            ) -> <addDepositCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addDepositCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addDepositReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addDeposit(address,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [98u8, 10u8, 222u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.contractAddr,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic0),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.additionalCalls),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addDepositReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `bid(address,bytes32,address,uint256,uint256)` and selector `0xee5a3b98`.
```solidity
function bid(address contractAddr, bytes32 topic0, address entrypoint, uint256 feePerCall, uint256 callsToDeposit) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidCall {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub entrypoint: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub feePerCall: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub callsToDeposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`bid(address,bytes32,address,uint256,uint256)`](bidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidCall) -> Self {
                    (
                        value.contractAddr,
                        value.topic0,
                        value.entrypoint,
                        value.feePerCall,
                        value.callsToDeposit,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contractAddr: tuple.0,
                        topic0: tuple.1,
                        entrypoint: tuple.2,
                        feePerCall: tuple.3,
                        callsToDeposit: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl bidReturn {
            fn _tokenize(
                &self,
            ) -> <bidCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bid(address,bytes32,address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [238u8, 90u8, 59u8, 152u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.contractAddr,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic0),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.entrypoint,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feePerCall),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.callsToDeposit),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                bidReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `executeHook(address,bytes32,bytes32,bytes32,bytes32,bytes,address)` and selector `0x5c054d22`.
```solidity
function executeHook(address contractAddr, bytes32 topic0, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory eventData, address originator) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeHookCall {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub topic1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub topic2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub topic3: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub eventData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`executeHook(address,bytes32,bytes32,bytes32,bytes32,bytes,address)`](executeHookCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeHookReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeHookCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeHookCall) -> Self {
                    (
                        value.contractAddr,
                        value.topic0,
                        value.topic1,
                        value.topic2,
                        value.topic3,
                        value.eventData,
                        value.originator,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeHookCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contractAddr: tuple.0,
                        topic0: tuple.1,
                        topic1: tuple.2,
                        topic2: tuple.3,
                        topic3: tuple.4,
                        eventData: tuple.5,
                        originator: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeHookReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeHookReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeHookReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl executeHookReturn {
            fn _tokenize(
                &self,
            ) -> <executeHookCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeHookCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeHookReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeHook(address,bytes32,bytes32,bytes32,bytes32,bytes,address)";
            const SELECTOR: [u8; 4] = [92u8, 5u8, 77u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.contractAddr,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic0),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic2),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.eventData,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                executeHookReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getExcessETH()` and selector `0xad77bd14`.
```solidity
function getExcessETH() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getExcessETHCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getExcessETH()`](getExcessETHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getExcessETHReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getExcessETHCall> for UnderlyingRustTuple<'_> {
                fn from(value: getExcessETHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getExcessETHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getExcessETHReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getExcessETHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getExcessETHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getExcessETHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getExcessETH()";
            const SELECTOR: [u8; 4] = [173u8, 119u8, 189u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getExcessETHReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getExcessETHReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getHook(address,bytes32)` and selector `0xe8f0a143`.
```solidity
function getHook(address contractAddr, bytes32 topic0) external view returns (Hook memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getHookCall {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getHook(address,bytes32)`](getHookCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getHookReturn {
        #[allow(missing_docs)]
        pub _0: <Hook as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getHookCall> for UnderlyingRustTuple<'_> {
                fn from(value: getHookCall) -> Self {
                    (value.contractAddr, value.topic0)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getHookCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contractAddr: tuple.0,
                        topic0: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Hook,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Hook as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getHookReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getHookReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getHookReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getHookCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <Hook as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (Hook,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getHook(address,bytes32)";
            const SELECTOR: [u8; 4] = [232u8, 240u8, 161u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.contractAddr,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<Hook as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getHookReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getHookReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hookGasStipend()` and selector `0x672b5bae`.
```solidity
function hookGasStipend() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hookGasStipendCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hookGasStipend()`](hookGasStipendCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hookGasStipendReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hookGasStipendCall> for UnderlyingRustTuple<'_> {
                fn from(value: hookGasStipendCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hookGasStipendCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hookGasStipendReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hookGasStipendReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hookGasStipendReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hookGasStipendCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hookGasStipend()";
            const SELECTOR: [u8; 4] = [103u8, 43u8, 91u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hookGasStipendReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hookGasStipendReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hooks(address,bytes32)` and selector `0x09345568`.
```solidity
function hooks(address, bytes32) external view returns (address owner, address entrypoint, uint256 feePerCall, uint256 deposit, uint256 callsRemaining);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hooksCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hooks(address,bytes32)`](hooksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hooksReturn {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub entrypoint: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub feePerCall: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub callsRemaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hooksCall> for UnderlyingRustTuple<'_> {
                fn from(value: hooksCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hooksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hooksReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hooksReturn) -> Self {
                    (
                        value.owner,
                        value.entrypoint,
                        value.feePerCall,
                        value.deposit,
                        value.callsRemaining,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hooksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        entrypoint: tuple.1,
                        feePerCall: tuple.2,
                        deposit: tuple.3,
                        callsRemaining: tuple.4,
                    }
                }
            }
        }
        impl hooksReturn {
            fn _tokenize(
                &self,
            ) -> <hooksCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.entrypoint,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feePerCall),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deposit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.callsRemaining),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hooksCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hooksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hooks(address,bytes32)";
            const SELECTOR: [u8; 4] = [9u8, 52u8, 85u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                hooksReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `originatorShareBps()` and selector `0x92adbd0b`.
```solidity
function originatorShareBps() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct originatorShareBpsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`originatorShareBps()`](originatorShareBpsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct originatorShareBpsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<originatorShareBpsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: originatorShareBpsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for originatorShareBpsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<originatorShareBpsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: originatorShareBpsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for originatorShareBpsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for originatorShareBpsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "originatorShareBps()";
            const SELECTOR: [u8; 4] = [146u8, 173u8, 189u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: originatorShareBpsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: originatorShareBpsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setHookGasStipend(uint256)` and selector `0xf13a3708`.
```solidity
function setHookGasStipend(uint256 newGasStipend) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setHookGasStipendCall {
        #[allow(missing_docs)]
        pub newGasStipend: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setHookGasStipend(uint256)`](setHookGasStipendCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setHookGasStipendReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHookGasStipendCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setHookGasStipendCall) -> Self {
                    (value.newGasStipend,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setHookGasStipendCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newGasStipend: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHookGasStipendReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setHookGasStipendReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setHookGasStipendReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setHookGasStipendReturn {
            fn _tokenize(
                &self,
            ) -> <setHookGasStipendCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setHookGasStipendCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setHookGasStipendReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setHookGasStipend(uint256)";
            const SELECTOR: [u8; 4] = [241u8, 58u8, 55u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newGasStipend),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setHookGasStipendReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setOriginatorShare(uint256)` and selector `0x66c9018d`.
```solidity
function setOriginatorShare(uint256 newShareBps) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOriginatorShareCall {
        #[allow(missing_docs)]
        pub newShareBps: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setOriginatorShare(uint256)`](setOriginatorShareCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOriginatorShareReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOriginatorShareCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setOriginatorShareCall) -> Self {
                    (value.newShareBps,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setOriginatorShareCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newShareBps: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOriginatorShareReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setOriginatorShareReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setOriginatorShareReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setOriginatorShareReturn {
            fn _tokenize(
                &self,
            ) -> <setOriginatorShareCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setOriginatorShareCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setOriginatorShareReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setOriginatorShare(uint256)";
            const SELECTOR: [u8; 4] = [102u8, 201u8, 1u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newShareBps),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setOriginatorShareReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `totalReservedETH()` and selector `0x77f12988`.
```solidity
function totalReservedETH() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalReservedETHCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`totalReservedETH()`](totalReservedETHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalReservedETHReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalReservedETHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: totalReservedETHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for totalReservedETHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalReservedETHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: totalReservedETHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for totalReservedETHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalReservedETHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalReservedETH()";
            const SELECTOR: [u8; 4] = [119u8, 241u8, 41u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: totalReservedETHReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: totalReservedETHReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `withdrawDeposit(address,bytes32)` and selector `0x241456b6`.
```solidity
function withdrawDeposit(address contractAddr, bytes32 topic0) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawDepositCall {
        #[allow(missing_docs)]
        pub contractAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub topic0: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`withdrawDeposit(address,bytes32)`](withdrawDepositCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawDepositReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawDepositCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawDepositCall) -> Self {
                    (value.contractAddr, value.topic0)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawDepositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contractAddr: tuple.0,
                        topic0: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawDepositReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdrawDepositReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdrawDepositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl withdrawDepositReturn {
            fn _tokenize(
                &self,
            ) -> <withdrawDepositCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawDepositCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawDepositReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawDeposit(address,bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 20u8, 86u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.contractAddr,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.topic0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                withdrawDepositReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `withdrawExcessETH()` and selector `0x9cebf9c5`.
```solidity
function withdrawExcessETH() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawExcessETHCall;
    ///Container type for the return parameters of the [`withdrawExcessETH()`](withdrawExcessETHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawExcessETHReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawExcessETHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdrawExcessETHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdrawExcessETHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawExcessETHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdrawExcessETHReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdrawExcessETHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl withdrawExcessETHReturn {
            fn _tokenize(
                &self,
            ) -> <withdrawExcessETHCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawExcessETHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawExcessETHReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawExcessETH()";
            const SELECTOR: [u8; 4] = [156u8, 235u8, 249u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                withdrawExcessETHReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HooksPerpetualAuction`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum HooksPerpetualAuctionCalls {
        #[allow(missing_docs)]
        MAX_ORIGINATOR_SHARE(MAX_ORIGINATOR_SHARECall),
        #[allow(missing_docs)]
        MIN_CALLS_DEPOSIT(MIN_CALLS_DEPOSITCall),
        #[allow(missing_docs)]
        addDeposit(addDepositCall),
        #[allow(missing_docs)]
        bid(bidCall),
        #[allow(missing_docs)]
        executeHook(executeHookCall),
        #[allow(missing_docs)]
        getExcessETH(getExcessETHCall),
        #[allow(missing_docs)]
        getHook(getHookCall),
        #[allow(missing_docs)]
        hookGasStipend(hookGasStipendCall),
        #[allow(missing_docs)]
        hooks(hooksCall),
        #[allow(missing_docs)]
        originatorShareBps(originatorShareBpsCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        setHookGasStipend(setHookGasStipendCall),
        #[allow(missing_docs)]
        setOriginatorShare(setOriginatorShareCall),
        #[allow(missing_docs)]
        totalReservedETH(totalReservedETHCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        withdrawDeposit(withdrawDepositCall),
        #[allow(missing_docs)]
        withdrawExcessETH(withdrawExcessETHCall),
    }
    #[automatically_derived]
    impl HooksPerpetualAuctionCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 52u8, 85u8, 104u8],
            [26u8, 127u8, 190u8, 171u8],
            [36u8, 20u8, 86u8, 182u8],
            [92u8, 5u8, 77u8, 34u8],
            [98u8, 10u8, 222u8, 83u8],
            [102u8, 201u8, 1u8, 141u8],
            [103u8, 43u8, 91u8, 174u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 241u8, 41u8, 136u8],
            [126u8, 60u8, 100u8, 240u8],
            [141u8, 165u8, 203u8, 91u8],
            [146u8, 173u8, 189u8, 11u8],
            [156u8, 235u8, 249u8, 197u8],
            [173u8, 119u8, 189u8, 20u8],
            [232u8, 240u8, 161u8, 67u8],
            [238u8, 90u8, 59u8, 152u8],
            [241u8, 58u8, 55u8, 8u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HooksPerpetualAuctionCalls {
        const NAME: &'static str = "HooksPerpetualAuctionCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::MAX_ORIGINATOR_SHARE(_) => {
                    <MAX_ORIGINATOR_SHARECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MIN_CALLS_DEPOSIT(_) => {
                    <MIN_CALLS_DEPOSITCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addDeposit(_) => {
                    <addDepositCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bid(_) => <bidCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::executeHook(_) => {
                    <executeHookCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getExcessETH(_) => {
                    <getExcessETHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getHook(_) => <getHookCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::hookGasStipend(_) => {
                    <hookGasStipendCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hooks(_) => <hooksCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::originatorShareBps(_) => {
                    <originatorShareBpsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setHookGasStipend(_) => {
                    <setHookGasStipendCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setOriginatorShare(_) => {
                    <setOriginatorShareCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::totalReservedETH(_) => {
                    <totalReservedETHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawDeposit(_) => {
                    <withdrawDepositCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawExcessETH(_) => {
                    <withdrawExcessETHCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls>] = &[
                {
                    fn hooks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <hooksCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HooksPerpetualAuctionCalls::hooks)
                    }
                    hooks
                },
                {
                    fn MIN_CALLS_DEPOSIT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <MIN_CALLS_DEPOSITCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::MIN_CALLS_DEPOSIT)
                    }
                    MIN_CALLS_DEPOSIT
                },
                {
                    fn withdrawDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <withdrawDepositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::withdrawDeposit)
                    }
                    withdrawDeposit
                },
                {
                    fn executeHook(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <executeHookCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::executeHook)
                    }
                    executeHook
                },
                {
                    fn addDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <addDepositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::addDeposit)
                    }
                    addDeposit
                },
                {
                    fn setOriginatorShare(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <setOriginatorShareCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::setOriginatorShare)
                    }
                    setOriginatorShare
                },
                {
                    fn hookGasStipend(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <hookGasStipendCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::hookGasStipend)
                    }
                    hookGasStipend
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn totalReservedETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <totalReservedETHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::totalReservedETH)
                    }
                    totalReservedETH
                },
                {
                    fn MAX_ORIGINATOR_SHARE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <MAX_ORIGINATOR_SHARECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::MAX_ORIGINATOR_SHARE)
                    }
                    MAX_ORIGINATOR_SHARE
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HooksPerpetualAuctionCalls::owner)
                    }
                    owner
                },
                {
                    fn originatorShareBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <originatorShareBpsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::originatorShareBps)
                    }
                    originatorShareBps
                },
                {
                    fn withdrawExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <withdrawExcessETHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::withdrawExcessETH)
                    }
                    withdrawExcessETH
                },
                {
                    fn getExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <getExcessETHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::getExcessETH)
                    }
                    getExcessETH
                },
                {
                    fn getHook(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <getHookCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HooksPerpetualAuctionCalls::getHook)
                    }
                    getHook
                },
                {
                    fn bid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <bidCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HooksPerpetualAuctionCalls::bid)
                    }
                    bid
                },
                {
                    fn setHookGasStipend(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <setHookGasStipendCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::setHookGasStipend)
                    }
                    setHookGasStipend
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls>] = &[
                {
                    fn hooks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <hooksCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::hooks)
                    }
                    hooks
                },
                {
                    fn MIN_CALLS_DEPOSIT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <MIN_CALLS_DEPOSITCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::MIN_CALLS_DEPOSIT)
                    }
                    MIN_CALLS_DEPOSIT
                },
                {
                    fn withdrawDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <withdrawDepositCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::withdrawDeposit)
                    }
                    withdrawDeposit
                },
                {
                    fn executeHook(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <executeHookCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::executeHook)
                    }
                    executeHook
                },
                {
                    fn addDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <addDepositCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::addDeposit)
                    }
                    addDeposit
                },
                {
                    fn setOriginatorShare(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <setOriginatorShareCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::setOriginatorShare)
                    }
                    setOriginatorShare
                },
                {
                    fn hookGasStipend(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <hookGasStipendCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::hookGasStipend)
                    }
                    hookGasStipend
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn totalReservedETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <totalReservedETHCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::totalReservedETH)
                    }
                    totalReservedETH
                },
                {
                    fn MAX_ORIGINATOR_SHARE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <MAX_ORIGINATOR_SHARECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::MAX_ORIGINATOR_SHARE)
                    }
                    MAX_ORIGINATOR_SHARE
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::owner)
                    }
                    owner
                },
                {
                    fn originatorShareBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <originatorShareBpsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::originatorShareBps)
                    }
                    originatorShareBps
                },
                {
                    fn withdrawExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <withdrawExcessETHCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::withdrawExcessETH)
                    }
                    withdrawExcessETH
                },
                {
                    fn getExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <getExcessETHCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::getExcessETH)
                    }
                    getExcessETH
                },
                {
                    fn getHook(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <getHookCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::getHook)
                    }
                    getHook
                },
                {
                    fn bid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <bidCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::bid)
                    }
                    bid
                },
                {
                    fn setHookGasStipend(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <setHookGasStipendCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::setHookGasStipend)
                    }
                    setHookGasStipend
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::MAX_ORIGINATOR_SHARE(inner) => {
                    <MAX_ORIGINATOR_SHARECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MIN_CALLS_DEPOSIT(inner) => {
                    <MIN_CALLS_DEPOSITCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addDeposit(inner) => {
                    <addDepositCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeHook(inner) => {
                    <executeHookCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getExcessETH(inner) => {
                    <getExcessETHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getHook(inner) => {
                    <getHookCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hookGasStipend(inner) => {
                    <hookGasStipendCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hooks(inner) => {
                    <hooksCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::originatorShareBps(inner) => {
                    <originatorShareBpsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setHookGasStipend(inner) => {
                    <setHookGasStipendCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setOriginatorShare(inner) => {
                    <setOriginatorShareCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::totalReservedETH(inner) => {
                    <totalReservedETHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawDeposit(inner) => {
                    <withdrawDepositCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawExcessETH(inner) => {
                    <withdrawExcessETHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::MAX_ORIGINATOR_SHARE(inner) => {
                    <MAX_ORIGINATOR_SHARECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MIN_CALLS_DEPOSIT(inner) => {
                    <MIN_CALLS_DEPOSITCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addDeposit(inner) => {
                    <addDepositCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::executeHook(inner) => {
                    <executeHookCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getExcessETH(inner) => {
                    <getExcessETHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getHook(inner) => {
                    <getHookCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::hookGasStipend(inner) => {
                    <hookGasStipendCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hooks(inner) => {
                    <hooksCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::originatorShareBps(inner) => {
                    <originatorShareBpsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setHookGasStipend(inner) => {
                    <setHookGasStipendCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setOriginatorShare(inner) => {
                    <setOriginatorShareCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::totalReservedETH(inner) => {
                    <totalReservedETHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawDeposit(inner) => {
                    <withdrawDepositCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawExcessETH(inner) => {
                    <withdrawExcessETHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HooksPerpetualAuction`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HooksPerpetualAuctionErrors {
        #[allow(missing_docs)]
        InsufficientBid(InsufficientBid),
        #[allow(missing_docs)]
        InsufficientDeposit(InsufficientDeposit),
        #[allow(missing_docs)]
        InvalidCallsAmount(InvalidCallsAmount),
        #[allow(missing_docs)]
        InvalidOriginatorShare(InvalidOriginatorShare),
        #[allow(missing_docs)]
        NoAuctionExists(NoAuctionExists),
        #[allow(missing_docs)]
        NoExcessETH(NoExcessETH),
        #[allow(missing_docs)]
        OnlyOwnerCanWithdraw(OnlyOwnerCanWithdraw),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
    }
    #[automatically_derived]
    impl HooksPerpetualAuctionErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [14u8, 30u8, 221u8, 218u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [54u8, 217u8, 80u8, 165u8],
            [60u8, 128u8, 235u8, 45u8],
            [62u8, 229u8, 174u8, 181u8],
            [71u8, 65u8, 141u8, 177u8],
            [142u8, 209u8, 249u8, 251u8],
            [145u8, 134u8, 120u8, 203u8],
            [156u8, 199u8, 13u8, 38u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HooksPerpetualAuctionErrors {
        const NAME: &'static str = "HooksPerpetualAuctionErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InsufficientBid(_) => {
                    <InsufficientBid as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientDeposit(_) => {
                    <InsufficientDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCallsAmount(_) => {
                    <InvalidCallsAmount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidOriginatorShare(_) => {
                    <InvalidOriginatorShare as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoAuctionExists(_) => {
                    <NoAuctionExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoExcessETH(_) => {
                    <NoExcessETH as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OnlyOwnerCanWithdraw(_) => {
                    <OnlyOwnerCanWithdraw as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors>] = &[
                {
                    fn InsufficientDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InsufficientDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InsufficientDeposit)
                    }
                    InsufficientDeposit
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidCallsAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InvalidCallsAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InvalidCallsAmount)
                    }
                    InvalidCallsAmount
                },
                {
                    fn NoExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <NoExcessETH as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(HooksPerpetualAuctionErrors::NoExcessETH)
                    }
                    NoExcessETH
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HooksPerpetualAuctionErrors::ReentrancyGuardReentrantCall,
                            )
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn OnlyOwnerCanWithdraw(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OnlyOwnerCanWithdraw as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OnlyOwnerCanWithdraw)
                    }
                    OnlyOwnerCanWithdraw
                },
                {
                    fn NoAuctionExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <NoAuctionExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::NoAuctionExists)
                    }
                    NoAuctionExists
                },
                {
                    fn InsufficientBid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InsufficientBid as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InsufficientBid)
                    }
                    InsufficientBid
                },
                {
                    fn InvalidOriginatorShare(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InvalidOriginatorShare as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InvalidOriginatorShare)
                    }
                    InvalidOriginatorShare
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors>] = &[
                {
                    fn InsufficientDeposit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InsufficientDeposit as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InsufficientDeposit)
                    }
                    InsufficientDeposit
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidCallsAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InvalidCallsAmount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InvalidCallsAmount)
                    }
                    InvalidCallsAmount
                },
                {
                    fn NoExcessETH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <NoExcessETH as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::NoExcessETH)
                    }
                    NoExcessETH
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HooksPerpetualAuctionErrors::ReentrancyGuardReentrantCall,
                            )
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn OnlyOwnerCanWithdraw(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <OnlyOwnerCanWithdraw as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::OnlyOwnerCanWithdraw)
                    }
                    OnlyOwnerCanWithdraw
                },
                {
                    fn NoAuctionExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <NoAuctionExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::NoAuctionExists)
                    }
                    NoAuctionExists
                },
                {
                    fn InsufficientBid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InsufficientBid as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InsufficientBid)
                    }
                    InsufficientBid
                },
                {
                    fn InvalidOriginatorShare(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionErrors> {
                        <InvalidOriginatorShare as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionErrors::InvalidOriginatorShare)
                    }
                    InvalidOriginatorShare
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InsufficientBid(inner) => {
                    <InsufficientBid as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientDeposit(inner) => {
                    <InsufficientDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCallsAmount(inner) => {
                    <InvalidCallsAmount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidOriginatorShare(inner) => {
                    <InvalidOriginatorShare as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoAuctionExists(inner) => {
                    <NoAuctionExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoExcessETH(inner) => {
                    <NoExcessETH as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OnlyOwnerCanWithdraw(inner) => {
                    <OnlyOwnerCanWithdraw as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InsufficientBid(inner) => {
                    <InsufficientBid as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientDeposit(inner) => {
                    <InsufficientDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCallsAmount(inner) => {
                    <InvalidCallsAmount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidOriginatorShare(inner) => {
                    <InvalidOriginatorShare as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoAuctionExists(inner) => {
                    <NoAuctionExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoExcessETH(inner) => {
                    <NoExcessETH as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OnlyOwnerCanWithdraw(inner) => {
                    <OnlyOwnerCanWithdraw as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HooksPerpetualAuction`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HooksPerpetualAuctionEvents {
        #[allow(missing_docs)]
        DepositWithdrawn(DepositWithdrawn),
        #[allow(missing_docs)]
        ExcessETHWithdrawn(ExcessETHWithdrawn),
        #[allow(missing_docs)]
        HookExecuted(HookExecuted),
        #[allow(missing_docs)]
        NewBid(NewBid),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl HooksPerpetualAuctionEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                64u8, 89u8, 129u8, 158u8, 157u8, 170u8, 96u8, 164u8, 25u8, 127u8, 51u8,
                121u8, 140u8, 162u8, 187u8, 100u8, 67u8, 197u8, 251u8, 182u8, 124u8,
                48u8, 170u8, 79u8, 10u8, 254u8, 183u8, 76u8, 31u8, 189u8, 15u8, 166u8,
            ],
            [
                129u8, 0u8, 239u8, 27u8, 135u8, 139u8, 13u8, 234u8, 11u8, 93u8, 77u8,
                119u8, 144u8, 111u8, 133u8, 46u8, 155u8, 193u8, 8u8, 17u8, 91u8, 247u8,
                35u8, 220u8, 5u8, 182u8, 72u8, 47u8, 56u8, 22u8, 226u8, 224u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                232u8, 48u8, 145u8, 171u8, 226u8, 215u8, 109u8, 200u8, 132u8, 25u8,
                109u8, 241u8, 50u8, 128u8, 189u8, 99u8, 75u8, 199u8, 86u8, 121u8, 147u8,
                3u8, 255u8, 40u8, 226u8, 72u8, 170u8, 205u8, 53u8, 16u8, 137u8, 198u8,
            ],
            [
                244u8, 166u8, 55u8, 65u8, 102u8, 77u8, 52u8, 227u8, 43u8, 142u8, 138u8,
                215u8, 105u8, 204u8, 92u8, 139u8, 139u8, 201u8, 38u8, 166u8, 115u8,
                150u8, 40u8, 112u8, 88u8, 232u8, 31u8, 4u8, 169u8, 73u8, 26u8, 20u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for HooksPerpetualAuctionEvents {
        const NAME: &'static str = "HooksPerpetualAuctionEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<DepositWithdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DepositWithdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DepositWithdrawn)
                }
                Some(
                    <ExcessETHWithdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ExcessETHWithdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ExcessETHWithdrawn)
                }
                Some(<HookExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <HookExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::HookExecuted)
                }
                Some(<NewBid as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <NewBid as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::NewBid)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for HooksPerpetualAuctionEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DepositWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ExcessETHWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::HookExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewBid(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DepositWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ExcessETHWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::HookExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewBid(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HooksPerpetualAuction`](self) contract instance.

See the [wrapper's documentation](`HooksPerpetualAuctionInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HooksPerpetualAuctionInstance<P, N> {
        HooksPerpetualAuctionInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HooksPerpetualAuctionInstance<P, N>>,
    > {
        HooksPerpetualAuctionInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        HooksPerpetualAuctionInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`HooksPerpetualAuction`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HooksPerpetualAuction`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HooksPerpetualAuctionInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for HooksPerpetualAuctionInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HooksPerpetualAuctionInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`HooksPerpetualAuction`](self) contract instance.

See the [wrapper's documentation](`HooksPerpetualAuctionInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HooksPerpetualAuctionInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> HooksPerpetualAuctionInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HooksPerpetualAuctionInstance<P, N> {
            HooksPerpetualAuctionInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`MAX_ORIGINATOR_SHARE`] function.
        pub fn MAX_ORIGINATOR_SHARE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MAX_ORIGINATOR_SHARECall, N> {
            self.call_builder(&MAX_ORIGINATOR_SHARECall)
        }
        ///Creates a new call builder for the [`MIN_CALLS_DEPOSIT`] function.
        pub fn MIN_CALLS_DEPOSIT(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MIN_CALLS_DEPOSITCall, N> {
            self.call_builder(&MIN_CALLS_DEPOSITCall)
        }
        ///Creates a new call builder for the [`addDeposit`] function.
        pub fn addDeposit(
            &self,
            contractAddr: alloy::sol_types::private::Address,
            topic0: alloy::sol_types::private::FixedBytes<32>,
            additionalCalls: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, addDepositCall, N> {
            self.call_builder(
                &addDepositCall {
                    contractAddr,
                    topic0,
                    additionalCalls,
                },
            )
        }
        ///Creates a new call builder for the [`bid`] function.
        pub fn bid(
            &self,
            contractAddr: alloy::sol_types::private::Address,
            topic0: alloy::sol_types::private::FixedBytes<32>,
            entrypoint: alloy::sol_types::private::Address,
            feePerCall: alloy::sol_types::private::primitives::aliases::U256,
            callsToDeposit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, bidCall, N> {
            self.call_builder(
                &bidCall {
                    contractAddr,
                    topic0,
                    entrypoint,
                    feePerCall,
                    callsToDeposit,
                },
            )
        }
        ///Creates a new call builder for the [`executeHook`] function.
        pub fn executeHook(
            &self,
            contractAddr: alloy::sol_types::private::Address,
            topic0: alloy::sol_types::private::FixedBytes<32>,
            topic1: alloy::sol_types::private::FixedBytes<32>,
            topic2: alloy::sol_types::private::FixedBytes<32>,
            topic3: alloy::sol_types::private::FixedBytes<32>,
            eventData: alloy::sol_types::private::Bytes,
            originator: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, executeHookCall, N> {
            self.call_builder(
                &executeHookCall {
                    contractAddr,
                    topic0,
                    topic1,
                    topic2,
                    topic3,
                    eventData,
                    originator,
                },
            )
        }
        ///Creates a new call builder for the [`getExcessETH`] function.
        pub fn getExcessETH(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getExcessETHCall, N> {
            self.call_builder(&getExcessETHCall)
        }
        ///Creates a new call builder for the [`getHook`] function.
        pub fn getHook(
            &self,
            contractAddr: alloy::sol_types::private::Address,
            topic0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getHookCall, N> {
            self.call_builder(
                &getHookCall {
                    contractAddr,
                    topic0,
                },
            )
        }
        ///Creates a new call builder for the [`hookGasStipend`] function.
        pub fn hookGasStipend(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, hookGasStipendCall, N> {
            self.call_builder(&hookGasStipendCall)
        }
        ///Creates a new call builder for the [`hooks`] function.
        pub fn hooks(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, hooksCall, N> {
            self.call_builder(&hooksCall { _0, _1 })
        }
        ///Creates a new call builder for the [`originatorShareBps`] function.
        pub fn originatorShareBps(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, originatorShareBpsCall, N> {
            self.call_builder(&originatorShareBpsCall)
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`setHookGasStipend`] function.
        pub fn setHookGasStipend(
            &self,
            newGasStipend: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setHookGasStipendCall, N> {
            self.call_builder(
                &setHookGasStipendCall {
                    newGasStipend,
                },
            )
        }
        ///Creates a new call builder for the [`setOriginatorShare`] function.
        pub fn setOriginatorShare(
            &self,
            newShareBps: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setOriginatorShareCall, N> {
            self.call_builder(
                &setOriginatorShareCall {
                    newShareBps,
                },
            )
        }
        ///Creates a new call builder for the [`totalReservedETH`] function.
        pub fn totalReservedETH(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, totalReservedETHCall, N> {
            self.call_builder(&totalReservedETHCall)
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`withdrawDeposit`] function.
        pub fn withdrawDeposit(
            &self,
            contractAddr: alloy::sol_types::private::Address,
            topic0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, withdrawDepositCall, N> {
            self.call_builder(
                &withdrawDepositCall {
                    contractAddr,
                    topic0,
                },
            )
        }
        ///Creates a new call builder for the [`withdrawExcessETH`] function.
        pub fn withdrawExcessETH(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, withdrawExcessETHCall, N> {
            self.call_builder(&withdrawExcessETHCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DepositWithdrawn`] event.
        pub fn DepositWithdrawn_filter(
            &self,
        ) -> alloy_contract::Event<&P, DepositWithdrawn, N> {
            self.event_filter::<DepositWithdrawn>()
        }
        ///Creates a new event filter for the [`ExcessETHWithdrawn`] event.
        pub fn ExcessETHWithdrawn_filter(
            &self,
        ) -> alloy_contract::Event<&P, ExcessETHWithdrawn, N> {
            self.event_filter::<ExcessETHWithdrawn>()
        }
        ///Creates a new event filter for the [`HookExecuted`] event.
        pub fn HookExecuted_filter(&self) -> alloy_contract::Event<&P, HookExecuted, N> {
            self.event_filter::<HookExecuted>()
        }
        ///Creates a new event filter for the [`NewBid`] event.
        pub fn NewBid_filter(&self) -> alloy_contract::Event<&P, NewBid, N> {
            self.event_filter::<NewBid>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
