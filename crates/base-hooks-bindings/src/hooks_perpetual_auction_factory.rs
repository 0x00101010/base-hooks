/**

Generated by the following Solidity interface...
```solidity
interface HooksPerpetualAuctionFactory {
    event HooksAuctionDeployed(address indexed auction, address indexed deployer, bytes32 salt, string version);

    function computeAddress(bytes32 salt) external view returns (address);
    function deployAuction(bytes32 salt, string memory version) external returns (address auction);
    function deployedAuctions(bytes32) external view returns (address);
    function generateSalt(address deployer, string memory version) external pure returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "computeAddress",
    "inputs": [
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "deployAuction",
    "inputs": [
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "auction",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deployedAuctions",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "generateSalt",
    "inputs": [
      {
        "name": "deployer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "HooksAuctionDeployed",
    "inputs": [
      {
        "name": "auction",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "deployer",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "version",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HooksPerpetualAuctionFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50612afc8061001d5f395ff3fe608060405234801562000010575f80fd5b506004361062000050575f3560e01c80637fde56da14620000545780638bb93e5d146200008a578063d949c3af14620000c0578063e4563c8314620000f6575b5f80fd5b6200007260048036038101906200006c919062000408565b6200012c565b6040516200008191906200047b565b60405180910390f35b620000a86004803603810190620000a2919062000408565b620001c0565b604051620000b791906200047b565b60405180910390f35b620000de6004803603810190620000d89190620005ee565b620001ef565b604051620000ed91906200047b565b60405180910390f35b6200011460048036038101906200010e919062000681565b6200037d565b604051620001239190620006f6565b60405180910390f35b5f80604051806020016200014090620003b1565b6020820181038252601f19601f8201166040525060405160200162000166919062000785565b60405160208183030381529060405290505f60ff60f81b308584805190602001206040516020016200019c94939291906200085d565b604051602081830303815290604052805190602001209050805f1c92505050919050565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8073ffffffffffffffffffffffffffffffffffffffff165f808581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002879062000910565b60405180910390fd5b826040516200029f90620003b1565b8190604051809103905ff5905080158015620002bd573d5f803e3d5ffd5b509050805f808581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f87f4ece9f8fcc6240c365696a7e5e5292ba98b44ddd1704ba589f3bf2e62e82185856040516200036f9291906200097a565b60405180910390a392915050565b5f828260405160200162000393929190620009ec565b60405160208183030381529060405280519060200120905092915050565b6120af8062000a1883390190565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b620003e481620003d0565b8114620003ef575f80fd5b50565b5f813590506200040281620003d9565b92915050565b5f6020828403121562000420576200041f620003c8565b5b5f6200042f84828501620003f2565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620004638262000438565b9050919050565b620004758162000457565b82525050565b5f602082019050620004905f8301846200046a565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620004e6826200049e565b810181811067ffffffffffffffff82111715620005085762000507620004ae565b5b80604052505050565b5f6200051c620003bf565b90506200052a8282620004db565b919050565b5f67ffffffffffffffff8211156200054c576200054b620004ae565b5b62000557826200049e565b9050602081019050919050565b828183375f83830152505050565b5f6200058862000582846200052f565b62000511565b905082815260208101848484011115620005a757620005a66200049a565b5b620005b484828562000564565b509392505050565b5f82601f830112620005d357620005d262000496565b5b8135620005e584826020860162000572565b91505092915050565b5f8060408385031215620006075762000606620003c8565b5b5f6200061685828601620003f2565b925050602083013567ffffffffffffffff8111156200063a5762000639620003cc565b5b6200064885828601620005bc565b9150509250929050565b6200065d8162000457565b811462000668575f80fd5b50565b5f813590506200067b8162000652565b92915050565b5f80604083850312156200069a5762000699620003c8565b5b5f620006a9858286016200066b565b925050602083013567ffffffffffffffff811115620006cd57620006cc620003cc565b5b620006db85828601620005bc565b9150509250929050565b620006f081620003d0565b82525050565b5f6020820190506200070b5f830184620006e5565b92915050565b5f81519050919050565b5f81905092915050565b5f5b838110156200074457808201518184015260208101905062000727565b5f8484015250505050565b5f6200075b8262000711565b6200076781856200071b565b93506200077981856020860162000725565b80840191505092915050565b5f6200079282846200074f565b915081905092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b620007e6620007e0826200079d565b620007c8565b82525050565b5f8160601b9050919050565b5f6200080482620007ec565b9050919050565b5f6200081782620007f8565b9050919050565b620008336200082d8262000457565b6200080b565b82525050565b5f819050919050565b620008576200085182620003d0565b62000839565b82525050565b5f6200086a8287620007d1565b6001820191506200087c82866200081e565b6014820191506200088e828562000842565b602082019150620008a0828462000842565b60208201915081905095945050505050565b5f82825260208201905092915050565b7f416c7265616479206465706c6f796564207769746820746869732073616c74005f82015250565b5f620008f8601f83620008b2565b91506200090582620008c2565b602082019050919050565b5f6020820190508181035f8301526200092981620008ea565b9050919050565b5f81519050919050565b5f620009468262000930565b620009528185620008b2565b93506200096481856020860162000725565b6200096f816200049e565b840191505092915050565b5f6040820190506200098f5f830185620006e5565b8181036020830152620009a381846200093a565b90509392505050565b5f81905092915050565b5f620009c28262000930565b620009ce8185620009ac565b9350620009e081856020860162000725565b80840191505092915050565b5f620009f982856200081e565b60148201915062000a0b8284620009b6565b9150819050939250505056fe60806040526107d0600455620f42406005553480156200001d575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000092575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000899190620001b5565b60405180910390fd5b620000a381620000b160201b60201c565b5060018081905550620001d0565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200019d8262000172565b9050919050565b620001af8162000191565b82525050565b5f602082019050620001ca5f830184620001a4565b92915050565b611ed180620001de5f395ff3fe60806040526004361061010c575f3560e01c80637e3c64f011610094578063ad77bd1411610063578063ad77bd1414610313578063e8f0a1431461033d578063ee5a3b9814610379578063f13a370814610395578063f2fde38b146103bd57610113565b80637e3c64f01461027f5780638da5cb5b146102a957806392adbd0b146102d35780639cebf9c5146102fd57610113565b8063620ade53116100db578063620ade53146101d157806366c9018d146101ed578063672b5bae14610215578063715018a61461023f57806377f129881461025557610113565b806309345568146101175780631a7fbeab14610157578063241456b6146101815780635c054d22146101a957610113565b3661011357005b5f80fd5b348015610122575f80fd5b5061013d600480360381019061013891906117d1565b6103e5565b60405161014e959493929190611836565b60405180910390f35b348015610162575f80fd5b5061016b610460565b6040516101789190611887565b60405180910390f35b34801561018c575f80fd5b506101a760048036038101906101a291906117d1565b610465565b005b3480156101b4575f80fd5b506101cf60048036038101906101ca9190611901565b6106e5565b005b6101eb60048036038101906101e691906119e8565b610b96565b005b3480156101f8575f80fd5b50610213600480360381019061020e9190611a38565b610d79565b005b348015610220575f80fd5b50610229610dc7565b6040516102369190611887565b60405180910390f35b34801561024a575f80fd5b50610253610dcd565b005b348015610260575f80fd5b50610269610de0565b6040516102769190611887565b60405180910390f35b34801561028a575f80fd5b50610293610de6565b6040516102a09190611887565b60405180910390f35b3480156102b4575f80fd5b506102bd610dec565b6040516102ca9190611a63565b60405180910390f35b3480156102de575f80fd5b506102e7610e13565b6040516102f49190611887565b60405180910390f35b348015610308575f80fd5b50610311610e19565b005b34801561031e575f80fd5b50610327610f23565b6040516103349190611887565b60405180910390f35b348015610348575f80fd5b50610363600480360381019061035e91906117d1565b610f4c565b6040516103709190611b00565b60405180910390f35b610393600480360381019061038e9190611b19565b61107a565b005b3480156103a0575f80fd5b506103bb60048036038101906103b69190611a38565b6114b2565b005b3480156103c8575f80fd5b506103e360048036038101906103de9190611b90565b6114c4565b005b6002602052815f5260405f20602052805f5260405f205f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b606481565b61046d611548565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610543576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f8111156106d7575f82600301819055505f82600401819055508060035f8282546105769190611be8565b9250508190555060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561066f573d5f803e3d5ffd5b503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f8100ef1b878b0dea0b5d4d77906f852e9bc108115bf723dc05b6482f3816e2e0846040516106ce9190611887565b60405180910390a45b50506106e161158e565b5050565b6106ed611548565b5f60025f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8981526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107c3576040517f8ed1f9fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816004015403610800576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61271060045483600201546108169190611c1b565b6108209190611c89565b90505f8183600201546108339190611be8565b90505f8211801561087057505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156108ba578373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156108b8573d5f803e3d5ffd5b505b5f836001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166005548d8d8d8d8d8d8d6040516024016109159796959493929190611d22565b6040516020818303038152906040527f3ea6f207000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161099f9190611df6565b5f604051808303815f8787f1925050503d805f81146109d9576040519150601f19603f3d011682016040523d82523d5f602084013e6109de565b606091505b505090508360020154846003015f8282546109f99190611be8565b92505081905550836004015f815480929190610a1490611e0c565b91905055505f846004015403610ad45760025f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550505b836002015460035f828254610ae99190611be8565b92505081905550835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167ff4a63741664d34e32b8e8ad769cc5c8b8bc926a67396287058e81f04a9491a1488886002015488604051610b7893929190611e33565b60405180910390a450505050610b8c61158e565b5050505050505050565b610b9e611548565b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828260020154610c859190611c1b565b905080341015610cc1576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826003015f828254610cd49190611e68565b9250508190555082826004015f828254610cee9190611e68565b925050819055508060035f828254610d069190611e68565b925050819055505f8134610d1a9190611be8565b90505f811115610d69573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610d67573d5f803e3d5ffd5b505b505050610d7461158e565b505050565b610d81611597565b612710811115610dbd576040517f9cc70d2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050565b60055481565b610dd5611597565b610dde5f61161e565b565b60035481565b61271081565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b610e21611597565b610e29611548565b5f4790505f60035482610e3c9190611be8565b90505f8103610e77576040517f3c80eb2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e7f610dec565b73ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610ec1573d5f803e3d5ffd5b50610eca610dec565b73ffffffffffffffffffffffffffffffffffffffff167f4059819e9daa60a4197f33798ca2bb6443c5fbb67c30aa4f0afeb74c1fbd0fa682604051610f0f9190611887565b60405180910390a25050610f2161158e565b565b5f804790506003548111610f37575f610f46565b60035481610f459190611be8565b5b91505090565b610f546116e6565b60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905092915050565b611082611548565b60648110156110bd576040517f36d950a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81836110ca9190611c1b565b905080341015611106576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461127857806002015484116111e7576040517f918678cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f811115611276578060035f8282546112089190611be8565b92505081905550815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611274573d5f803e3d5ffd5b505b505b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018381526020018481525060025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401559050508160035f8282546113d39190611e68565b925050819055505f82346113e79190611be8565b90505f811115611436573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611434573d5f803e3d5ffd5b505b3373ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167fe83091abe2d76dc884196df13280bd634bc756799303ff28e248aacd351089c689898960405161149893929190611e33565b60405180910390a45050506114ab61158e565b5050505050565b6114ba611597565b8060058190555050565b6114cc611597565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361153c575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016115339190611a63565b60405180910390fd5b6115458161161e565b50565b600260015403611584576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b61159f6116df565b73ffffffffffffffffffffffffffffffffffffffff166115bd610dec565b73ffffffffffffffffffffffffffffffffffffffff161461161c576115e06116df565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116139190611a63565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61176d82611744565b9050919050565b61177d81611763565b8114611787575f80fd5b50565b5f8135905061179881611774565b92915050565b5f819050919050565b6117b08161179e565b81146117ba575f80fd5b50565b5f813590506117cb816117a7565b92915050565b5f80604083850312156117e7576117e661173c565b5b5f6117f48582860161178a565b9250506020611805858286016117bd565b9150509250929050565b61181881611763565b82525050565b5f819050919050565b6118308161181e565b82525050565b5f60a0820190506118495f83018861180f565b611856602083018761180f565b6118636040830186611827565b6118706060830185611827565b61187d6080830184611827565b9695505050505050565b5f60208201905061189a5f830184611827565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126118c1576118c06118a0565b5b8235905067ffffffffffffffff8111156118de576118dd6118a4565b5b6020830191508360018202830111156118fa576118f96118a8565b5b9250929050565b5f805f805f805f8060e0898b03121561191d5761191c61173c565b5b5f61192a8b828c0161178a565b985050602061193b8b828c016117bd565b975050604061194c8b828c016117bd565b965050606061195d8b828c016117bd565b955050608061196e8b828c016117bd565b94505060a089013567ffffffffffffffff81111561198f5761198e611740565b5b61199b8b828c016118ac565b935093505060c06119ae8b828c0161178a565b9150509295985092959890939650565b6119c78161181e565b81146119d1575f80fd5b50565b5f813590506119e2816119be565b92915050565b5f805f606084860312156119ff576119fe61173c565b5b5f611a0c8682870161178a565b9350506020611a1d868287016117bd565b9250506040611a2e868287016119d4565b9150509250925092565b5f60208284031215611a4d57611a4c61173c565b5b5f611a5a848285016119d4565b91505092915050565b5f602082019050611a765f83018461180f565b92915050565b611a8581611763565b82525050565b611a948161181e565b82525050565b60a082015f820151611aae5f850182611a7c565b506020820151611ac16020850182611a7c565b506040820151611ad46040850182611a8b565b506060820151611ae76060850182611a8b565b506080820151611afa6080850182611a8b565b50505050565b5f60a082019050611b135f830184611a9a565b92915050565b5f805f805f60a08688031215611b3257611b3161173c565b5b5f611b3f8882890161178a565b9550506020611b50888289016117bd565b9450506040611b618882890161178a565b9350506060611b72888289016119d4565b9250506080611b83888289016119d4565b9150509295509295909350565b5f60208284031215611ba557611ba461173c565b5b5f611bb28482850161178a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611bf28261181e565b9150611bfd8361181e565b9250828203905081811115611c1557611c14611bbb565b5b92915050565b5f611c258261181e565b9150611c308361181e565b9250828202611c3e8161181e565b91508282048414831517611c5557611c54611bbb565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611c938261181e565b9150611c9e8361181e565b925082611cae57611cad611c5c565b5b828204905092915050565b611cc28161179e565b82525050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f611d018385611cc8565b9350611d0e838584611cd8565b611d1783611ce6565b840190509392505050565b5f60c082019050611d355f83018a61180f565b611d426020830189611cb9565b611d4f6040830188611cb9565b611d5c6060830187611cb9565b611d696080830186611cb9565b81810360a0830152611d7c818486611cf6565b905098975050505050505050565b5f81519050919050565b5f81905092915050565b5f5b83811015611dbb578082015181840152602081019050611da0565b5f8484015250505050565b5f611dd082611d8a565b611dda8185611d94565b9350611dea818560208601611d9e565b80840191505092915050565b5f611e018284611dc6565b915081905092915050565b5f611e168261181e565b91505f8203611e2857611e27611bbb565b5b600182039050919050565b5f606082019050611e465f83018661180f565b611e536020830185611827565b611e606040830184611827565b949350505050565b5f611e728261181e565b9150611e7d8361181e565b9250828201905080821115611e9557611e94611bbb565b5b9291505056fea26469706673582212207aab91668e1a239704daebef2fc2fc6947c83aaec0fc69426839dc31354f4d2764736f6c63430008140033a2646970667358221220bc43e43be9d06fec4c0106cac8aa4f87ffbb7ab7f6e259d5a0ea3d2daeae8aa864736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa*\xFC\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15b\0\0\x10W_\x80\xFD[P`\x046\x10b\0\0PW_5`\xE0\x1C\x80c\x7F\xDEV\xDA\x14b\0\0TW\x80c\x8B\xB9>]\x14b\0\0\x8AW\x80c\xD9I\xC3\xAF\x14b\0\0\xC0W\x80c\xE4V<\x83\x14b\0\0\xF6W[_\x80\xFD[b\0\0r`\x04\x806\x03\x81\x01\x90b\0\0l\x91\x90b\0\x04\x08V[b\0\x01,V[`@Qb\0\0\x81\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\0\xA8`\x04\x806\x03\x81\x01\x90b\0\0\xA2\x91\x90b\0\x04\x08V[b\0\x01\xC0V[`@Qb\0\0\xB7\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\0\xDE`\x04\x806\x03\x81\x01\x90b\0\0\xD8\x91\x90b\0\x05\xEEV[b\0\x01\xEFV[`@Qb\0\0\xED\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\x01\x14`\x04\x806\x03\x81\x01\x90b\0\x01\x0E\x91\x90b\0\x06\x81V[b\0\x03}V[`@Qb\0\x01#\x91\x90b\0\x06\xF6V[`@Q\x80\x91\x03\x90\xF3[_\x80`@Q\x80` \x01b\0\x01@\x90b\0\x03\xB1V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP`@Q` \x01b\0\x01f\x91\x90b\0\x07\x85V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_`\xFF`\xF8\x1B0\x85\x84\x80Q\x90` \x01 `@Q` \x01b\0\x01\x9C\x94\x93\x92\x91\x90b\0\x08]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x80_\x1C\x92PPP\x91\x90PV[_` R\x80_R`@_ _\x91PT\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[_\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x80\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x02\x90W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01b\0\x02\x87\x90b\0\t\x10V[`@Q\x80\x91\x03\x90\xFD[\x82`@Qb\0\x02\x9F\x90b\0\x03\xB1V[\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15b\0\x02\xBDW=_\x80>=_\xFD[P\x90P\x80_\x80\x85\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x87\xF4\xEC\xE9\xF8\xFC\xC6$\x0C6V\x96\xA7\xE5\xE5)+\xA9\x8BD\xDD\xD1pK\xA5\x89\xF3\xBF.b\xE8!\x85\x85`@Qb\0\x03o\x92\x91\x90b\0\tzV[`@Q\x80\x91\x03\x90\xA3\x92\x91PPV[_\x82\x82`@Q` \x01b\0\x03\x93\x92\x91\x90b\0\t\xECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[a \xAF\x80b\0\n\x18\x839\x01\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[b\0\x03\xE4\x81b\0\x03\xD0V[\x81\x14b\0\x03\xEFW_\x80\xFD[PV[_\x815\x90Pb\0\x04\x02\x81b\0\x03\xD9V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x04 Wb\0\x04\x1Fb\0\x03\xC8V[[_b\0\x04/\x84\x82\x85\x01b\0\x03\xF2V[\x91PP\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x04c\x82b\0\x048V[\x90P\x91\x90PV[b\0\x04u\x81b\0\x04WV[\x82RPPV[_` \x82\x01\x90Pb\0\x04\x90_\x83\x01\x84b\0\x04jV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[b\0\x04\xE6\x82b\0\x04\x9EV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15b\0\x05\x08Wb\0\x05\x07b\0\x04\xAEV[[\x80`@RPPPV[_b\0\x05\x1Cb\0\x03\xBFV[\x90Pb\0\x05*\x82\x82b\0\x04\xDBV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15b\0\x05LWb\0\x05Kb\0\x04\xAEV[[b\0\x05W\x82b\0\x04\x9EV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_b\0\x05\x88b\0\x05\x82\x84b\0\x05/V[b\0\x05\x11V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15b\0\x05\xA7Wb\0\x05\xA6b\0\x04\x9AV[[b\0\x05\xB4\x84\x82\x85b\0\x05dV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12b\0\x05\xD3Wb\0\x05\xD2b\0\x04\x96V[[\x815b\0\x05\xE5\x84\x82` \x86\x01b\0\x05rV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x06\x07Wb\0\x06\x06b\0\x03\xC8V[[_b\0\x06\x16\x85\x82\x86\x01b\0\x03\xF2V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15b\0\x06:Wb\0\x069b\0\x03\xCCV[[b\0\x06H\x85\x82\x86\x01b\0\x05\xBCV[\x91PP\x92P\x92\x90PV[b\0\x06]\x81b\0\x04WV[\x81\x14b\0\x06hW_\x80\xFD[PV[_\x815\x90Pb\0\x06{\x81b\0\x06RV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x06\x9AWb\0\x06\x99b\0\x03\xC8V[[_b\0\x06\xA9\x85\x82\x86\x01b\0\x06kV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15b\0\x06\xCDWb\0\x06\xCCb\0\x03\xCCV[[b\0\x06\xDB\x85\x82\x86\x01b\0\x05\xBCV[\x91PP\x92P\x92\x90PV[b\0\x06\xF0\x81b\0\x03\xD0V[\x82RPPV[_` \x82\x01\x90Pb\0\x07\x0B_\x83\x01\x84b\0\x06\xE5V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15b\0\x07DW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pb\0\x07'V[_\x84\x84\x01RPPPPV[_b\0\x07[\x82b\0\x07\x11V[b\0\x07g\x81\x85b\0\x07\x1BV[\x93Pb\0\x07y\x81\x85` \x86\x01b\0\x07%V[\x80\x84\x01\x91PP\x92\x91PPV[_b\0\x07\x92\x82\x84b\0\x07OV[\x91P\x81\x90P\x92\x91PPV[_\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[b\0\x07\xE6b\0\x07\xE0\x82b\0\x07\x9DV[b\0\x07\xC8V[\x82RPPV[_\x81``\x1B\x90P\x91\x90PV[_b\0\x08\x04\x82b\0\x07\xECV[\x90P\x91\x90PV[_b\0\x08\x17\x82b\0\x07\xF8V[\x90P\x91\x90PV[b\0\x083b\0\x08-\x82b\0\x04WV[b\0\x08\x0BV[\x82RPPV[_\x81\x90P\x91\x90PV[b\0\x08Wb\0\x08Q\x82b\0\x03\xD0V[b\0\x089V[\x82RPPV[_b\0\x08j\x82\x87b\0\x07\xD1V[`\x01\x82\x01\x91Pb\0\x08|\x82\x86b\0\x08\x1EV[`\x14\x82\x01\x91Pb\0\x08\x8E\x82\x85b\0\x08BV[` \x82\x01\x91Pb\0\x08\xA0\x82\x84b\0\x08BV[` \x82\x01\x91P\x81\x90P\x95\x94PPPPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FAlready deployed with this salt\0_\x82\x01RPV[_b\0\x08\xF8`\x1F\x83b\0\x08\xB2V[\x91Pb\0\t\x05\x82b\0\x08\xC2V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Rb\0\t)\x81b\0\x08\xEAV[\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_b\0\tF\x82b\0\t0V[b\0\tR\x81\x85b\0\x08\xB2V[\x93Pb\0\td\x81\x85` \x86\x01b\0\x07%V[b\0\to\x81b\0\x04\x9EV[\x84\x01\x91PP\x92\x91PPV[_`@\x82\x01\x90Pb\0\t\x8F_\x83\x01\x85b\0\x06\xE5V[\x81\x81\x03` \x83\x01Rb\0\t\xA3\x81\x84b\0\t:V[\x90P\x93\x92PPPV[_\x81\x90P\x92\x91PPV[_b\0\t\xC2\x82b\0\t0V[b\0\t\xCE\x81\x85b\0\t\xACV[\x93Pb\0\t\xE0\x81\x85` \x86\x01b\0\x07%V[\x80\x84\x01\x91PP\x92\x91PPV[_b\0\t\xF9\x82\x85b\0\x08\x1EV[`\x14\x82\x01\x91Pb\0\n\x0B\x82\x84b\0\t\xB6V[\x91P\x81\x90P\x93\x92PPPV\xFE`\x80`@Ra\x07\xD0`\x04Ub\x0FB@`\x05U4\x80\x15b\0\0\x1DW_\x80\xFD[P3_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03b\0\0\x92W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01b\0\0\x89\x91\x90b\0\x01\xB5V[`@Q\x80\x91\x03\x90\xFD[b\0\0\xA3\x81b\0\0\xB1` \x1B` \x1CV[P`\x01\x80\x81\x90UPb\0\x01\xD0V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x01\x9D\x82b\0\x01rV[\x90P\x91\x90PV[b\0\x01\xAF\x81b\0\x01\x91V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xCA_\x83\x01\x84b\0\x01\xA4V[\x92\x91PPV[a\x1E\xD1\x80b\0\x01\xDE_9_\xF3\xFE`\x80`@R`\x046\x10a\x01\x0CW_5`\xE0\x1C\x80c~<d\xF0\x11a\0\x94W\x80c\xADw\xBD\x14\x11a\0cW\x80c\xADw\xBD\x14\x14a\x03\x13W\x80c\xE8\xF0\xA1C\x14a\x03=W\x80c\xEEZ;\x98\x14a\x03yW\x80c\xF1:7\x08\x14a\x03\x95W\x80c\xF2\xFD\xE3\x8B\x14a\x03\xBDWa\x01\x13V[\x80c~<d\xF0\x14a\x02\x7FW\x80c\x8D\xA5\xCB[\x14a\x02\xA9W\x80c\x92\xAD\xBD\x0B\x14a\x02\xD3W\x80c\x9C\xEB\xF9\xC5\x14a\x02\xFDWa\x01\x13V[\x80cb\n\xDES\x11a\0\xDBW\x80cb\n\xDES\x14a\x01\xD1W\x80cf\xC9\x01\x8D\x14a\x01\xEDW\x80cg+[\xAE\x14a\x02\x15W\x80cqP\x18\xA6\x14a\x02?W\x80cw\xF1)\x88\x14a\x02UWa\x01\x13V[\x80c\t4Uh\x14a\x01\x17W\x80c\x1A\x7F\xBE\xAB\x14a\x01WW\x80c$\x14V\xB6\x14a\x01\x81W\x80c\\\x05M\"\x14a\x01\xA9Wa\x01\x13V[6a\x01\x13W\0[_\x80\xFD[4\x80\x15a\x01\"W_\x80\xFD[Pa\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x17\xD1V[a\x03\xE5V[`@Qa\x01N\x95\x94\x93\x92\x91\x90a\x186V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01bW_\x80\xFD[Pa\x01ka\x04`V[`@Qa\x01x\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8CW_\x80\xFD[Pa\x01\xA7`\x04\x806\x03\x81\x01\x90a\x01\xA2\x91\x90a\x17\xD1V[a\x04eV[\0[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xCF`\x04\x806\x03\x81\x01\x90a\x01\xCA\x91\x90a\x19\x01V[a\x06\xE5V[\0[a\x01\xEB`\x04\x806\x03\x81\x01\x90a\x01\xE6\x91\x90a\x19\xE8V[a\x0B\x96V[\0[4\x80\x15a\x01\xF8W_\x80\xFD[Pa\x02\x13`\x04\x806\x03\x81\x01\x90a\x02\x0E\x91\x90a\x1A8V[a\ryV[\0[4\x80\x15a\x02 W_\x80\xFD[Pa\x02)a\r\xC7V[`@Qa\x026\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x02Sa\r\xCDV[\0[4\x80\x15a\x02`W_\x80\xFD[Pa\x02ia\r\xE0V[`@Qa\x02v\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8AW_\x80\xFD[Pa\x02\x93a\r\xE6V[`@Qa\x02\xA0\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\xBDa\r\xECV[`@Qa\x02\xCA\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xDEW_\x80\xFD[Pa\x02\xE7a\x0E\x13V[`@Qa\x02\xF4\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x08W_\x80\xFD[Pa\x03\x11a\x0E\x19V[\0[4\x80\x15a\x03\x1EW_\x80\xFD[Pa\x03'a\x0F#V[`@Qa\x034\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03HW_\x80\xFD[Pa\x03c`\x04\x806\x03\x81\x01\x90a\x03^\x91\x90a\x17\xD1V[a\x0FLV[`@Qa\x03p\x91\x90a\x1B\0V[`@Q\x80\x91\x03\x90\xF3[a\x03\x93`\x04\x806\x03\x81\x01\x90a\x03\x8E\x91\x90a\x1B\x19V[a\x10zV[\0[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xBB`\x04\x806\x03\x81\x01\x90a\x03\xB6\x91\x90a\x1A8V[a\x14\xB2V[\0[4\x80\x15a\x03\xC8W_\x80\xFD[Pa\x03\xE3`\x04\x806\x03\x81\x01\x90a\x03\xDE\x91\x90a\x1B\x90V[a\x14\xC4V[\0[`\x02` R\x81_R`@_ ` R\x80_R`@_ _\x91P\x91PP\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x02\x01T\x90\x80`\x03\x01T\x90\x80`\x04\x01T\x90P\x85V[`d\x81V[a\x04ma\x15HV[_`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05CW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x06\xD7W_\x82`\x03\x01\x81\x90UP_\x82`\x04\x01\x81\x90UP\x80`\x03_\x82\x82Ta\x05v\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06oW=_\x80>=_\xFD[P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x81\0\xEF\x1B\x87\x8B\r\xEA\x0B]Mw\x90o\x85.\x9B\xC1\x08\x11[\xF7#\xDC\x05\xB6H/8\x16\xE2\xE0\x84`@Qa\x06\xCE\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA4[PPa\x06\xE1a\x15\x8EV[PPV[a\x06\xEDa\x15HV[_`\x02_\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x89\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x07\xC3W`@Q\x7F\x8E\xD1\xF9\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x04\x01T\x03a\x08\0W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'\x10`\x04T\x83`\x02\x01Ta\x08\x16\x91\x90a\x1C\x1BV[a\x08 \x91\x90a\x1C\x89V[\x90P_\x81\x83`\x02\x01Ta\x083\x91\x90a\x1B\xE8V[\x90P_\x82\x11\x80\x15a\x08pWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\xBAW\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x83\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x08\xB8W=_\x80>=_\xFD[P[_\x83`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T\x8D\x8D\x8D\x8D\x8D\x8D\x8D`@Q`$\x01a\t\x15\x97\x96\x95\x94\x93\x92\x91\x90a\x1D\"V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F>\xA6\xF2\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\t\x9F\x91\x90a\x1D\xF6V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\t\xD9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xDEV[``\x91P[PP\x90P\x83`\x02\x01T\x84`\x03\x01_\x82\x82Ta\t\xF9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83`\x04\x01_\x81T\x80\x92\x91\x90a\n\x14\x90a\x1E\x0CV[\x91\x90PUP_\x84`\x04\x01T\x03a\n\xD4W`\x02_\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x8C\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP[\x83`\x02\x01T`\x03_\x82\x82Ta\n\xE9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8B\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF4\xA67AfM4\xE3+\x8E\x8A\xD7i\xCC\\\x8B\x8B\xC9&\xA6s\x96(pX\xE8\x1F\x04\xA9I\x1A\x14\x88\x88`\x02\x01T\x88`@Qa\x0Bx\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPPa\x0B\x8Ca\x15\x8EV[PPPPPPPPV[a\x0B\x9Ea\x15HV[_`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0CtW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x82`\x02\x01Ta\x0C\x85\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x0C\xC1W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x82`\x03\x01_\x82\x82Ta\x0C\xD4\x91\x90a\x1EhV[\x92PP\x81\x90UP\x82\x82`\x04\x01_\x82\x82Ta\x0C\xEE\x91\x90a\x1EhV[\x92PP\x81\x90UP\x80`\x03_\x82\x82Ta\r\x06\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x814a\r\x1A\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\riW3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\rgW=_\x80>=_\xFD[P[PPPa\rta\x15\x8EV[PPPV[a\r\x81a\x15\x97V[a'\x10\x81\x11\x15a\r\xBDW`@Q\x7F\x9C\xC7\r&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x04\x81\x90UPPV[`\x05T\x81V[a\r\xD5a\x15\x97V[a\r\xDE_a\x16\x1EV[V[`\x03T\x81V[a'\x10\x81V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[`\x04T\x81V[a\x0E!a\x15\x97V[a\x0E)a\x15HV[_G\x90P_`\x03T\x82a\x0E<\x91\x90a\x1B\xE8V[\x90P_\x81\x03a\x0EwW`@Q\x7F<\x80\xEB-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x7Fa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0E\xC1W=_\x80>=_\xFD[Pa\x0E\xCAa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F@Y\x81\x9E\x9D\xAA`\xA4\x19\x7F3y\x8C\xA2\xBBdC\xC5\xFB\xB6|0\xAAO\n\xFE\xB7L\x1F\xBD\x0F\xA6\x82`@Qa\x0F\x0F\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA2PPa\x0F!a\x15\x8EV[V[_\x80G\x90P`\x03T\x81\x11a\x0F7W_a\x0FFV[`\x03T\x81a\x0FE\x91\x90a\x1B\xE8V[[\x91PP\x90V[a\x0FTa\x16\xE6V[`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81R` \x01`\x04\x82\x01T\x81RPP\x90P\x92\x91PPV[a\x10\x82a\x15HV[`d\x81\x10\x15a\x10\xBDW`@Q\x7F6\xD9P\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81\x83a\x10\xCA\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x11\x06W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x87\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12xW\x80`\x02\x01T\x84\x11a\x11\xE7W`@Q\x7F\x91\x86x\xCB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x12vW\x80`\x03_\x82\x82Ta\x12\x08\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x12tW=_\x80>=_\xFD[P[P[`@Q\x80`\xA0\x01`@R\x803s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01\x83\x81R` \x01\x84\x81RP`\x02_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x88\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP` \x82\x01Q\x81`\x01\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01U`\x80\x82\x01Q\x81`\x04\x01U\x90PP\x81`\x03_\x82\x82Ta\x13\xD3\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x824a\x13\xE7\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\x146W3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x144W=_\x80>=_\xFD[P[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xE80\x91\xAB\xE2\xD7m\xC8\x84\x19m\xF12\x80\xBDcK\xC7Vy\x93\x03\xFF(\xE2H\xAA\xCD5\x10\x89\xC6\x89\x89\x89`@Qa\x14\x98\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPa\x14\xABa\x15\x8EV[PPPPPV[a\x14\xBAa\x15\x97V[\x80`\x05\x81\x90UPPV[a\x14\xCCa\x15\x97V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x15<W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x153\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[a\x15E\x81a\x16\x1EV[PV[`\x02`\x01T\x03a\x15\x84W`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02`\x01\x81\x90UPV[`\x01\x80\x81\x90UPV[a\x15\x9Fa\x16\xDFV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\xBDa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x16\x1CWa\x15\xE0a\x16\xDFV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x13\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[`@Q\x80`\xA0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[_\x80\xFD[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x17m\x82a\x17DV[\x90P\x91\x90PV[a\x17}\x81a\x17cV[\x81\x14a\x17\x87W_\x80\xFD[PV[_\x815\x90Pa\x17\x98\x81a\x17tV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x17\xB0\x81a\x17\x9EV[\x81\x14a\x17\xBAW_\x80\xFD[PV[_\x815\x90Pa\x17\xCB\x81a\x17\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x17\xE7Wa\x17\xE6a\x17<V[[_a\x17\xF4\x85\x82\x86\x01a\x17\x8AV[\x92PP` a\x18\x05\x85\x82\x86\x01a\x17\xBDV[\x91PP\x92P\x92\x90PV[a\x18\x18\x81a\x17cV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x180\x81a\x18\x1EV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x18I_\x83\x01\x88a\x18\x0FV[a\x18V` \x83\x01\x87a\x18\x0FV[a\x18c`@\x83\x01\x86a\x18'V[a\x18p``\x83\x01\x85a\x18'V[a\x18}`\x80\x83\x01\x84a\x18'V[\x96\x95PPPPPPV[_` \x82\x01\x90Pa\x18\x9A_\x83\x01\x84a\x18'V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x18\xC1Wa\x18\xC0a\x18\xA0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDEWa\x18\xDDa\x18\xA4V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x18\xFAWa\x18\xF9a\x18\xA8V[[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x19\x1DWa\x19\x1Ca\x17<V[[_a\x19*\x8B\x82\x8C\x01a\x17\x8AV[\x98PP` a\x19;\x8B\x82\x8C\x01a\x17\xBDV[\x97PP`@a\x19L\x8B\x82\x8C\x01a\x17\xBDV[\x96PP``a\x19]\x8B\x82\x8C\x01a\x17\xBDV[\x95PP`\x80a\x19n\x8B\x82\x8C\x01a\x17\xBDV[\x94PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x8FWa\x19\x8Ea\x17@V[[a\x19\x9B\x8B\x82\x8C\x01a\x18\xACV[\x93P\x93PP`\xC0a\x19\xAE\x8B\x82\x8C\x01a\x17\x8AV[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[a\x19\xC7\x81a\x18\x1EV[\x81\x14a\x19\xD1W_\x80\xFD[PV[_\x815\x90Pa\x19\xE2\x81a\x19\xBEV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x19\xFFWa\x19\xFEa\x17<V[[_a\x1A\x0C\x86\x82\x87\x01a\x17\x8AV[\x93PP` a\x1A\x1D\x86\x82\x87\x01a\x17\xBDV[\x92PP`@a\x1A.\x86\x82\x87\x01a\x19\xD4V[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x1AMWa\x1ALa\x17<V[[_a\x1AZ\x84\x82\x85\x01a\x19\xD4V[\x91PP\x92\x91PPV[_` \x82\x01\x90Pa\x1Av_\x83\x01\x84a\x18\x0FV[\x92\x91PPV[a\x1A\x85\x81a\x17cV[\x82RPPV[a\x1A\x94\x81a\x18\x1EV[\x82RPPV[`\xA0\x82\x01_\x82\x01Qa\x1A\xAE_\x85\x01\x82a\x1A|V[P` \x82\x01Qa\x1A\xC1` \x85\x01\x82a\x1A|V[P`@\x82\x01Qa\x1A\xD4`@\x85\x01\x82a\x1A\x8BV[P``\x82\x01Qa\x1A\xE7``\x85\x01\x82a\x1A\x8BV[P`\x80\x82\x01Qa\x1A\xFA`\x80\x85\x01\x82a\x1A\x8BV[PPPPV[_`\xA0\x82\x01\x90Pa\x1B\x13_\x83\x01\x84a\x1A\x9AV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x1B2Wa\x1B1a\x17<V[[_a\x1B?\x88\x82\x89\x01a\x17\x8AV[\x95PP` a\x1BP\x88\x82\x89\x01a\x17\xBDV[\x94PP`@a\x1Ba\x88\x82\x89\x01a\x17\x8AV[\x93PP``a\x1Br\x88\x82\x89\x01a\x19\xD4V[\x92PP`\x80a\x1B\x83\x88\x82\x89\x01a\x19\xD4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_` \x82\x84\x03\x12\x15a\x1B\xA5Wa\x1B\xA4a\x17<V[[_a\x1B\xB2\x84\x82\x85\x01a\x17\x8AV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1B\xF2\x82a\x18\x1EV[\x91Pa\x1B\xFD\x83a\x18\x1EV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1C\x15Wa\x1C\x14a\x1B\xBBV[[\x92\x91PPV[_a\x1C%\x82a\x18\x1EV[\x91Pa\x1C0\x83a\x18\x1EV[\x92P\x82\x82\x02a\x1C>\x81a\x18\x1EV[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x1CUWa\x1CTa\x1B\xBBV[[P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_a\x1C\x93\x82a\x18\x1EV[\x91Pa\x1C\x9E\x83a\x18\x1EV[\x92P\x82a\x1C\xAEWa\x1C\xADa\x1C\\V[[\x82\x82\x04\x90P\x92\x91PPV[a\x1C\xC2\x81a\x17\x9EV[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x1D\x01\x83\x85a\x1C\xC8V[\x93Pa\x1D\x0E\x83\x85\x84a\x1C\xD8V[a\x1D\x17\x83a\x1C\xE6V[\x84\x01\x90P\x93\x92PPPV[_`\xC0\x82\x01\x90Pa\x1D5_\x83\x01\x8Aa\x18\x0FV[a\x1DB` \x83\x01\x89a\x1C\xB9V[a\x1DO`@\x83\x01\x88a\x1C\xB9V[a\x1D\\``\x83\x01\x87a\x1C\xB9V[a\x1Di`\x80\x83\x01\x86a\x1C\xB9V[\x81\x81\x03`\xA0\x83\x01Ra\x1D|\x81\x84\x86a\x1C\xF6V[\x90P\x98\x97PPPPPPPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x1D\xBBW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xA0V[_\x84\x84\x01RPPPPV[_a\x1D\xD0\x82a\x1D\x8AV[a\x1D\xDA\x81\x85a\x1D\x94V[\x93Pa\x1D\xEA\x81\x85` \x86\x01a\x1D\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1E\x01\x82\x84a\x1D\xC6V[\x91P\x81\x90P\x92\x91PPV[_a\x1E\x16\x82a\x18\x1EV[\x91P_\x82\x03a\x1E(Wa\x1E'a\x1B\xBBV[[`\x01\x82\x03\x90P\x91\x90PV[_``\x82\x01\x90Pa\x1EF_\x83\x01\x86a\x18\x0FV[a\x1ES` \x83\x01\x85a\x18'V[a\x1E``@\x83\x01\x84a\x18'V[\x94\x93PPPPV[_a\x1Er\x82a\x18\x1EV[\x91Pa\x1E}\x83a\x18\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\x95Wa\x1E\x94a\x1B\xBBV[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 z\xAB\x91f\x8E\x1A#\x97\x04\xDA\xEB\xEF/\xC2\xFCiG\xC8:\xAE\xC0\xFCiBh9\xDC15OM'dsolcC\0\x08\x14\x003\xA2dipfsX\"\x12 \xBCC\xE4;\xE9\xD0o\xECL\x01\x06\xCA\xC8\xAAO\x87\xFF\xBBz\xB7\xF6\xE2Y\xD5\xA0\xEA=-\xAE\xAE\x8A\xA8dsolcC\0\x08\x14\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801562000010575f80fd5b506004361062000050575f3560e01c80637fde56da14620000545780638bb93e5d146200008a578063d949c3af14620000c0578063e4563c8314620000f6575b5f80fd5b6200007260048036038101906200006c919062000408565b6200012c565b6040516200008191906200047b565b60405180910390f35b620000a86004803603810190620000a2919062000408565b620001c0565b604051620000b791906200047b565b60405180910390f35b620000de6004803603810190620000d89190620005ee565b620001ef565b604051620000ed91906200047b565b60405180910390f35b6200011460048036038101906200010e919062000681565b6200037d565b604051620001239190620006f6565b60405180910390f35b5f80604051806020016200014090620003b1565b6020820181038252601f19601f8201166040525060405160200162000166919062000785565b60405160208183030381529060405290505f60ff60f81b308584805190602001206040516020016200019c94939291906200085d565b604051602081830303815290604052805190602001209050805f1c92505050919050565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8073ffffffffffffffffffffffffffffffffffffffff165f808581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002879062000910565b60405180910390fd5b826040516200029f90620003b1565b8190604051809103905ff5905080158015620002bd573d5f803e3d5ffd5b509050805f808581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f87f4ece9f8fcc6240c365696a7e5e5292ba98b44ddd1704ba589f3bf2e62e82185856040516200036f9291906200097a565b60405180910390a392915050565b5f828260405160200162000393929190620009ec565b60405160208183030381529060405280519060200120905092915050565b6120af8062000a1883390190565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b620003e481620003d0565b8114620003ef575f80fd5b50565b5f813590506200040281620003d9565b92915050565b5f6020828403121562000420576200041f620003c8565b5b5f6200042f84828501620003f2565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620004638262000438565b9050919050565b620004758162000457565b82525050565b5f602082019050620004905f8301846200046a565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620004e6826200049e565b810181811067ffffffffffffffff82111715620005085762000507620004ae565b5b80604052505050565b5f6200051c620003bf565b90506200052a8282620004db565b919050565b5f67ffffffffffffffff8211156200054c576200054b620004ae565b5b62000557826200049e565b9050602081019050919050565b828183375f83830152505050565b5f6200058862000582846200052f565b62000511565b905082815260208101848484011115620005a757620005a66200049a565b5b620005b484828562000564565b509392505050565b5f82601f830112620005d357620005d262000496565b5b8135620005e584826020860162000572565b91505092915050565b5f8060408385031215620006075762000606620003c8565b5b5f6200061685828601620003f2565b925050602083013567ffffffffffffffff8111156200063a5762000639620003cc565b5b6200064885828601620005bc565b9150509250929050565b6200065d8162000457565b811462000668575f80fd5b50565b5f813590506200067b8162000652565b92915050565b5f80604083850312156200069a5762000699620003c8565b5b5f620006a9858286016200066b565b925050602083013567ffffffffffffffff811115620006cd57620006cc620003cc565b5b620006db85828601620005bc565b9150509250929050565b620006f081620003d0565b82525050565b5f6020820190506200070b5f830184620006e5565b92915050565b5f81519050919050565b5f81905092915050565b5f5b838110156200074457808201518184015260208101905062000727565b5f8484015250505050565b5f6200075b8262000711565b6200076781856200071b565b93506200077981856020860162000725565b80840191505092915050565b5f6200079282846200074f565b915081905092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b620007e6620007e0826200079d565b620007c8565b82525050565b5f8160601b9050919050565b5f6200080482620007ec565b9050919050565b5f6200081782620007f8565b9050919050565b620008336200082d8262000457565b6200080b565b82525050565b5f819050919050565b620008576200085182620003d0565b62000839565b82525050565b5f6200086a8287620007d1565b6001820191506200087c82866200081e565b6014820191506200088e828562000842565b602082019150620008a0828462000842565b60208201915081905095945050505050565b5f82825260208201905092915050565b7f416c7265616479206465706c6f796564207769746820746869732073616c74005f82015250565b5f620008f8601f83620008b2565b91506200090582620008c2565b602082019050919050565b5f6020820190508181035f8301526200092981620008ea565b9050919050565b5f81519050919050565b5f620009468262000930565b620009528185620008b2565b93506200096481856020860162000725565b6200096f816200049e565b840191505092915050565b5f6040820190506200098f5f830185620006e5565b8181036020830152620009a381846200093a565b90509392505050565b5f81905092915050565b5f620009c28262000930565b620009ce8185620009ac565b9350620009e081856020860162000725565b80840191505092915050565b5f620009f982856200081e565b60148201915062000a0b8284620009b6565b9150819050939250505056fe60806040526107d0600455620f42406005553480156200001d575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000092575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000899190620001b5565b60405180910390fd5b620000a381620000b160201b60201c565b5060018081905550620001d0565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200019d8262000172565b9050919050565b620001af8162000191565b82525050565b5f602082019050620001ca5f830184620001a4565b92915050565b611ed180620001de5f395ff3fe60806040526004361061010c575f3560e01c80637e3c64f011610094578063ad77bd1411610063578063ad77bd1414610313578063e8f0a1431461033d578063ee5a3b9814610379578063f13a370814610395578063f2fde38b146103bd57610113565b80637e3c64f01461027f5780638da5cb5b146102a957806392adbd0b146102d35780639cebf9c5146102fd57610113565b8063620ade53116100db578063620ade53146101d157806366c9018d146101ed578063672b5bae14610215578063715018a61461023f57806377f129881461025557610113565b806309345568146101175780631a7fbeab14610157578063241456b6146101815780635c054d22146101a957610113565b3661011357005b5f80fd5b348015610122575f80fd5b5061013d600480360381019061013891906117d1565b6103e5565b60405161014e959493929190611836565b60405180910390f35b348015610162575f80fd5b5061016b610460565b6040516101789190611887565b60405180910390f35b34801561018c575f80fd5b506101a760048036038101906101a291906117d1565b610465565b005b3480156101b4575f80fd5b506101cf60048036038101906101ca9190611901565b6106e5565b005b6101eb60048036038101906101e691906119e8565b610b96565b005b3480156101f8575f80fd5b50610213600480360381019061020e9190611a38565b610d79565b005b348015610220575f80fd5b50610229610dc7565b6040516102369190611887565b60405180910390f35b34801561024a575f80fd5b50610253610dcd565b005b348015610260575f80fd5b50610269610de0565b6040516102769190611887565b60405180910390f35b34801561028a575f80fd5b50610293610de6565b6040516102a09190611887565b60405180910390f35b3480156102b4575f80fd5b506102bd610dec565b6040516102ca9190611a63565b60405180910390f35b3480156102de575f80fd5b506102e7610e13565b6040516102f49190611887565b60405180910390f35b348015610308575f80fd5b50610311610e19565b005b34801561031e575f80fd5b50610327610f23565b6040516103349190611887565b60405180910390f35b348015610348575f80fd5b50610363600480360381019061035e91906117d1565b610f4c565b6040516103709190611b00565b60405180910390f35b610393600480360381019061038e9190611b19565b61107a565b005b3480156103a0575f80fd5b506103bb60048036038101906103b69190611a38565b6114b2565b005b3480156103c8575f80fd5b506103e360048036038101906103de9190611b90565b6114c4565b005b6002602052815f5260405f20602052805f5260405f205f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b606481565b61046d611548565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610543576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f8111156106d7575f82600301819055505f82600401819055508060035f8282546105769190611be8565b9250508190555060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561066f573d5f803e3d5ffd5b503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f8100ef1b878b0dea0b5d4d77906f852e9bc108115bf723dc05b6482f3816e2e0846040516106ce9190611887565b60405180910390a45b50506106e161158e565b5050565b6106ed611548565b5f60025f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8981526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107c3576040517f8ed1f9fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816004015403610800576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61271060045483600201546108169190611c1b565b6108209190611c89565b90505f8183600201546108339190611be8565b90505f8211801561087057505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156108ba578373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156108b8573d5f803e3d5ffd5b505b5f836001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166005548d8d8d8d8d8d8d6040516024016109159796959493929190611d22565b6040516020818303038152906040527f3ea6f207000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161099f9190611df6565b5f604051808303815f8787f1925050503d805f81146109d9576040519150601f19603f3d011682016040523d82523d5f602084013e6109de565b606091505b505090508360020154846003015f8282546109f99190611be8565b92505081905550836004015f815480929190610a1490611e0c565b91905055505f846004015403610ad45760025f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550505b836002015460035f828254610ae99190611be8565b92505081905550835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167ff4a63741664d34e32b8e8ad769cc5c8b8bc926a67396287058e81f04a9491a1488886002015488604051610b7893929190611e33565b60405180910390a450505050610b8c61158e565b5050505050505050565b610b9e611548565b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f2090503373ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f47418db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828260020154610c859190611c1b565b905080341015610cc1576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80826003015f828254610cd49190611e68565b9250508190555082826004015f828254610cee9190611e68565b925050819055508060035f828254610d069190611e68565b925050819055505f8134610d1a9190611be8565b90505f811115610d69573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610d67573d5f803e3d5ffd5b505b505050610d7461158e565b505050565b610d81611597565b612710811115610dbd576040517f9cc70d2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050565b60055481565b610dd5611597565b610dde5f61161e565b565b60035481565b61271081565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b610e21611597565b610e29611548565b5f4790505f60035482610e3c9190611be8565b90505f8103610e77576040517f3c80eb2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e7f610dec565b73ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610ec1573d5f803e3d5ffd5b50610eca610dec565b73ffffffffffffffffffffffffffffffffffffffff167f4059819e9daa60a4197f33798ca2bb6443c5fbb67c30aa4f0afeb74c1fbd0fa682604051610f0f9190611887565b60405180910390a25050610f2161158e565b565b5f804790506003548111610f37575f610f46565b60035481610f459190611be8565b5b91505090565b610f546116e6565b60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905092915050565b611082611548565b60648110156110bd576040517f36d950a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81836110ca9190611c1b565b905080341015611106576040517f0e1eddda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461127857806002015484116111e7576040517f918678cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f816003015490505f811115611276578060035f8282546112089190611be8565b92505081905550815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611274573d5f803e3d5ffd5b505b505b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018381526020018481525060025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8881526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401559050508160035f8282546113d39190611e68565b925050819055505f82346113e79190611be8565b90505f811115611436573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611434573d5f803e3d5ffd5b505b3373ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167fe83091abe2d76dc884196df13280bd634bc756799303ff28e248aacd351089c689898960405161149893929190611e33565b60405180910390a45050506114ab61158e565b5050505050565b6114ba611597565b8060058190555050565b6114cc611597565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361153c575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016115339190611a63565b60405180910390fd5b6115458161161e565b50565b600260015403611584576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b61159f6116df565b73ffffffffffffffffffffffffffffffffffffffff166115bd610dec565b73ffffffffffffffffffffffffffffffffffffffff161461161c576115e06116df565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116139190611a63565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61176d82611744565b9050919050565b61177d81611763565b8114611787575f80fd5b50565b5f8135905061179881611774565b92915050565b5f819050919050565b6117b08161179e565b81146117ba575f80fd5b50565b5f813590506117cb816117a7565b92915050565b5f80604083850312156117e7576117e661173c565b5b5f6117f48582860161178a565b9250506020611805858286016117bd565b9150509250929050565b61181881611763565b82525050565b5f819050919050565b6118308161181e565b82525050565b5f60a0820190506118495f83018861180f565b611856602083018761180f565b6118636040830186611827565b6118706060830185611827565b61187d6080830184611827565b9695505050505050565b5f60208201905061189a5f830184611827565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126118c1576118c06118a0565b5b8235905067ffffffffffffffff8111156118de576118dd6118a4565b5b6020830191508360018202830111156118fa576118f96118a8565b5b9250929050565b5f805f805f805f8060e0898b03121561191d5761191c61173c565b5b5f61192a8b828c0161178a565b985050602061193b8b828c016117bd565b975050604061194c8b828c016117bd565b965050606061195d8b828c016117bd565b955050608061196e8b828c016117bd565b94505060a089013567ffffffffffffffff81111561198f5761198e611740565b5b61199b8b828c016118ac565b935093505060c06119ae8b828c0161178a565b9150509295985092959890939650565b6119c78161181e565b81146119d1575f80fd5b50565b5f813590506119e2816119be565b92915050565b5f805f606084860312156119ff576119fe61173c565b5b5f611a0c8682870161178a565b9350506020611a1d868287016117bd565b9250506040611a2e868287016119d4565b9150509250925092565b5f60208284031215611a4d57611a4c61173c565b5b5f611a5a848285016119d4565b91505092915050565b5f602082019050611a765f83018461180f565b92915050565b611a8581611763565b82525050565b611a948161181e565b82525050565b60a082015f820151611aae5f850182611a7c565b506020820151611ac16020850182611a7c565b506040820151611ad46040850182611a8b565b506060820151611ae76060850182611a8b565b506080820151611afa6080850182611a8b565b50505050565b5f60a082019050611b135f830184611a9a565b92915050565b5f805f805f60a08688031215611b3257611b3161173c565b5b5f611b3f8882890161178a565b9550506020611b50888289016117bd565b9450506040611b618882890161178a565b9350506060611b72888289016119d4565b9250506080611b83888289016119d4565b9150509295509295909350565b5f60208284031215611ba557611ba461173c565b5b5f611bb28482850161178a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611bf28261181e565b9150611bfd8361181e565b9250828203905081811115611c1557611c14611bbb565b5b92915050565b5f611c258261181e565b9150611c308361181e565b9250828202611c3e8161181e565b91508282048414831517611c5557611c54611bbb565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611c938261181e565b9150611c9e8361181e565b925082611cae57611cad611c5c565b5b828204905092915050565b611cc28161179e565b82525050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f611d018385611cc8565b9350611d0e838584611cd8565b611d1783611ce6565b840190509392505050565b5f60c082019050611d355f83018a61180f565b611d426020830189611cb9565b611d4f6040830188611cb9565b611d5c6060830187611cb9565b611d696080830186611cb9565b81810360a0830152611d7c818486611cf6565b905098975050505050505050565b5f81519050919050565b5f81905092915050565b5f5b83811015611dbb578082015181840152602081019050611da0565b5f8484015250505050565b5f611dd082611d8a565b611dda8185611d94565b9350611dea818560208601611d9e565b80840191505092915050565b5f611e018284611dc6565b915081905092915050565b5f611e168261181e565b91505f8203611e2857611e27611bbb565b5b600182039050919050565b5f606082019050611e465f83018661180f565b611e536020830185611827565b611e606040830184611827565b949350505050565b5f611e728261181e565b9150611e7d8361181e565b9250828201905080821115611e9557611e94611bbb565b5b9291505056fea26469706673582212207aab91668e1a239704daebef2fc2fc6947c83aaec0fc69426839dc31354f4d2764736f6c63430008140033a2646970667358221220bc43e43be9d06fec4c0106cac8aa4f87ffbb7ab7f6e259d5a0ea3d2daeae8aa864736f6c63430008140033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15b\0\0\x10W_\x80\xFD[P`\x046\x10b\0\0PW_5`\xE0\x1C\x80c\x7F\xDEV\xDA\x14b\0\0TW\x80c\x8B\xB9>]\x14b\0\0\x8AW\x80c\xD9I\xC3\xAF\x14b\0\0\xC0W\x80c\xE4V<\x83\x14b\0\0\xF6W[_\x80\xFD[b\0\0r`\x04\x806\x03\x81\x01\x90b\0\0l\x91\x90b\0\x04\x08V[b\0\x01,V[`@Qb\0\0\x81\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\0\xA8`\x04\x806\x03\x81\x01\x90b\0\0\xA2\x91\x90b\0\x04\x08V[b\0\x01\xC0V[`@Qb\0\0\xB7\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\0\xDE`\x04\x806\x03\x81\x01\x90b\0\0\xD8\x91\x90b\0\x05\xEEV[b\0\x01\xEFV[`@Qb\0\0\xED\x91\x90b\0\x04{V[`@Q\x80\x91\x03\x90\xF3[b\0\x01\x14`\x04\x806\x03\x81\x01\x90b\0\x01\x0E\x91\x90b\0\x06\x81V[b\0\x03}V[`@Qb\0\x01#\x91\x90b\0\x06\xF6V[`@Q\x80\x91\x03\x90\xF3[_\x80`@Q\x80` \x01b\0\x01@\x90b\0\x03\xB1V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP`@Q` \x01b\0\x01f\x91\x90b\0\x07\x85V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_`\xFF`\xF8\x1B0\x85\x84\x80Q\x90` \x01 `@Q` \x01b\0\x01\x9C\x94\x93\x92\x91\x90b\0\x08]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x80_\x1C\x92PPP\x91\x90PV[_` R\x80_R`@_ _\x91PT\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[_\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x80\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x02\x90W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01b\0\x02\x87\x90b\0\t\x10V[`@Q\x80\x91\x03\x90\xFD[\x82`@Qb\0\x02\x9F\x90b\0\x03\xB1V[\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15b\0\x02\xBDW=_\x80>=_\xFD[P\x90P\x80_\x80\x85\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x87\xF4\xEC\xE9\xF8\xFC\xC6$\x0C6V\x96\xA7\xE5\xE5)+\xA9\x8BD\xDD\xD1pK\xA5\x89\xF3\xBF.b\xE8!\x85\x85`@Qb\0\x03o\x92\x91\x90b\0\tzV[`@Q\x80\x91\x03\x90\xA3\x92\x91PPV[_\x82\x82`@Q` \x01b\0\x03\x93\x92\x91\x90b\0\t\xECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[a \xAF\x80b\0\n\x18\x839\x01\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[b\0\x03\xE4\x81b\0\x03\xD0V[\x81\x14b\0\x03\xEFW_\x80\xFD[PV[_\x815\x90Pb\0\x04\x02\x81b\0\x03\xD9V[\x92\x91PPV[_` \x82\x84\x03\x12\x15b\0\x04 Wb\0\x04\x1Fb\0\x03\xC8V[[_b\0\x04/\x84\x82\x85\x01b\0\x03\xF2V[\x91PP\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x04c\x82b\0\x048V[\x90P\x91\x90PV[b\0\x04u\x81b\0\x04WV[\x82RPPV[_` \x82\x01\x90Pb\0\x04\x90_\x83\x01\x84b\0\x04jV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[b\0\x04\xE6\x82b\0\x04\x9EV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15b\0\x05\x08Wb\0\x05\x07b\0\x04\xAEV[[\x80`@RPPPV[_b\0\x05\x1Cb\0\x03\xBFV[\x90Pb\0\x05*\x82\x82b\0\x04\xDBV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15b\0\x05LWb\0\x05Kb\0\x04\xAEV[[b\0\x05W\x82b\0\x04\x9EV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_b\0\x05\x88b\0\x05\x82\x84b\0\x05/V[b\0\x05\x11V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15b\0\x05\xA7Wb\0\x05\xA6b\0\x04\x9AV[[b\0\x05\xB4\x84\x82\x85b\0\x05dV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12b\0\x05\xD3Wb\0\x05\xD2b\0\x04\x96V[[\x815b\0\x05\xE5\x84\x82` \x86\x01b\0\x05rV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x06\x07Wb\0\x06\x06b\0\x03\xC8V[[_b\0\x06\x16\x85\x82\x86\x01b\0\x03\xF2V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15b\0\x06:Wb\0\x069b\0\x03\xCCV[[b\0\x06H\x85\x82\x86\x01b\0\x05\xBCV[\x91PP\x92P\x92\x90PV[b\0\x06]\x81b\0\x04WV[\x81\x14b\0\x06hW_\x80\xFD[PV[_\x815\x90Pb\0\x06{\x81b\0\x06RV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15b\0\x06\x9AWb\0\x06\x99b\0\x03\xC8V[[_b\0\x06\xA9\x85\x82\x86\x01b\0\x06kV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15b\0\x06\xCDWb\0\x06\xCCb\0\x03\xCCV[[b\0\x06\xDB\x85\x82\x86\x01b\0\x05\xBCV[\x91PP\x92P\x92\x90PV[b\0\x06\xF0\x81b\0\x03\xD0V[\x82RPPV[_` \x82\x01\x90Pb\0\x07\x0B_\x83\x01\x84b\0\x06\xE5V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15b\0\x07DW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pb\0\x07'V[_\x84\x84\x01RPPPPV[_b\0\x07[\x82b\0\x07\x11V[b\0\x07g\x81\x85b\0\x07\x1BV[\x93Pb\0\x07y\x81\x85` \x86\x01b\0\x07%V[\x80\x84\x01\x91PP\x92\x91PPV[_b\0\x07\x92\x82\x84b\0\x07OV[\x91P\x81\x90P\x92\x91PPV[_\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[b\0\x07\xE6b\0\x07\xE0\x82b\0\x07\x9DV[b\0\x07\xC8V[\x82RPPV[_\x81``\x1B\x90P\x91\x90PV[_b\0\x08\x04\x82b\0\x07\xECV[\x90P\x91\x90PV[_b\0\x08\x17\x82b\0\x07\xF8V[\x90P\x91\x90PV[b\0\x083b\0\x08-\x82b\0\x04WV[b\0\x08\x0BV[\x82RPPV[_\x81\x90P\x91\x90PV[b\0\x08Wb\0\x08Q\x82b\0\x03\xD0V[b\0\x089V[\x82RPPV[_b\0\x08j\x82\x87b\0\x07\xD1V[`\x01\x82\x01\x91Pb\0\x08|\x82\x86b\0\x08\x1EV[`\x14\x82\x01\x91Pb\0\x08\x8E\x82\x85b\0\x08BV[` \x82\x01\x91Pb\0\x08\xA0\x82\x84b\0\x08BV[` \x82\x01\x91P\x81\x90P\x95\x94PPPPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FAlready deployed with this salt\0_\x82\x01RPV[_b\0\x08\xF8`\x1F\x83b\0\x08\xB2V[\x91Pb\0\t\x05\x82b\0\x08\xC2V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Rb\0\t)\x81b\0\x08\xEAV[\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_b\0\tF\x82b\0\t0V[b\0\tR\x81\x85b\0\x08\xB2V[\x93Pb\0\td\x81\x85` \x86\x01b\0\x07%V[b\0\to\x81b\0\x04\x9EV[\x84\x01\x91PP\x92\x91PPV[_`@\x82\x01\x90Pb\0\t\x8F_\x83\x01\x85b\0\x06\xE5V[\x81\x81\x03` \x83\x01Rb\0\t\xA3\x81\x84b\0\t:V[\x90P\x93\x92PPPV[_\x81\x90P\x92\x91PPV[_b\0\t\xC2\x82b\0\t0V[b\0\t\xCE\x81\x85b\0\t\xACV[\x93Pb\0\t\xE0\x81\x85` \x86\x01b\0\x07%V[\x80\x84\x01\x91PP\x92\x91PPV[_b\0\t\xF9\x82\x85b\0\x08\x1EV[`\x14\x82\x01\x91Pb\0\n\x0B\x82\x84b\0\t\xB6V[\x91P\x81\x90P\x93\x92PPPV\xFE`\x80`@Ra\x07\xD0`\x04Ub\x0FB@`\x05U4\x80\x15b\0\0\x1DW_\x80\xFD[P3_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03b\0\0\x92W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01b\0\0\x89\x91\x90b\0\x01\xB5V[`@Q\x80\x91\x03\x90\xFD[b\0\0\xA3\x81b\0\0\xB1` \x1B` \x1CV[P`\x01\x80\x81\x90UPb\0\x01\xD0V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\0\x01\x9D\x82b\0\x01rV[\x90P\x91\x90PV[b\0\x01\xAF\x81b\0\x01\x91V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xCA_\x83\x01\x84b\0\x01\xA4V[\x92\x91PPV[a\x1E\xD1\x80b\0\x01\xDE_9_\xF3\xFE`\x80`@R`\x046\x10a\x01\x0CW_5`\xE0\x1C\x80c~<d\xF0\x11a\0\x94W\x80c\xADw\xBD\x14\x11a\0cW\x80c\xADw\xBD\x14\x14a\x03\x13W\x80c\xE8\xF0\xA1C\x14a\x03=W\x80c\xEEZ;\x98\x14a\x03yW\x80c\xF1:7\x08\x14a\x03\x95W\x80c\xF2\xFD\xE3\x8B\x14a\x03\xBDWa\x01\x13V[\x80c~<d\xF0\x14a\x02\x7FW\x80c\x8D\xA5\xCB[\x14a\x02\xA9W\x80c\x92\xAD\xBD\x0B\x14a\x02\xD3W\x80c\x9C\xEB\xF9\xC5\x14a\x02\xFDWa\x01\x13V[\x80cb\n\xDES\x11a\0\xDBW\x80cb\n\xDES\x14a\x01\xD1W\x80cf\xC9\x01\x8D\x14a\x01\xEDW\x80cg+[\xAE\x14a\x02\x15W\x80cqP\x18\xA6\x14a\x02?W\x80cw\xF1)\x88\x14a\x02UWa\x01\x13V[\x80c\t4Uh\x14a\x01\x17W\x80c\x1A\x7F\xBE\xAB\x14a\x01WW\x80c$\x14V\xB6\x14a\x01\x81W\x80c\\\x05M\"\x14a\x01\xA9Wa\x01\x13V[6a\x01\x13W\0[_\x80\xFD[4\x80\x15a\x01\"W_\x80\xFD[Pa\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x17\xD1V[a\x03\xE5V[`@Qa\x01N\x95\x94\x93\x92\x91\x90a\x186V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01bW_\x80\xFD[Pa\x01ka\x04`V[`@Qa\x01x\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8CW_\x80\xFD[Pa\x01\xA7`\x04\x806\x03\x81\x01\x90a\x01\xA2\x91\x90a\x17\xD1V[a\x04eV[\0[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xCF`\x04\x806\x03\x81\x01\x90a\x01\xCA\x91\x90a\x19\x01V[a\x06\xE5V[\0[a\x01\xEB`\x04\x806\x03\x81\x01\x90a\x01\xE6\x91\x90a\x19\xE8V[a\x0B\x96V[\0[4\x80\x15a\x01\xF8W_\x80\xFD[Pa\x02\x13`\x04\x806\x03\x81\x01\x90a\x02\x0E\x91\x90a\x1A8V[a\ryV[\0[4\x80\x15a\x02 W_\x80\xFD[Pa\x02)a\r\xC7V[`@Qa\x026\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x02Sa\r\xCDV[\0[4\x80\x15a\x02`W_\x80\xFD[Pa\x02ia\r\xE0V[`@Qa\x02v\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8AW_\x80\xFD[Pa\x02\x93a\r\xE6V[`@Qa\x02\xA0\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB4W_\x80\xFD[Pa\x02\xBDa\r\xECV[`@Qa\x02\xCA\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xDEW_\x80\xFD[Pa\x02\xE7a\x0E\x13V[`@Qa\x02\xF4\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x08W_\x80\xFD[Pa\x03\x11a\x0E\x19V[\0[4\x80\x15a\x03\x1EW_\x80\xFD[Pa\x03'a\x0F#V[`@Qa\x034\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03HW_\x80\xFD[Pa\x03c`\x04\x806\x03\x81\x01\x90a\x03^\x91\x90a\x17\xD1V[a\x0FLV[`@Qa\x03p\x91\x90a\x1B\0V[`@Q\x80\x91\x03\x90\xF3[a\x03\x93`\x04\x806\x03\x81\x01\x90a\x03\x8E\x91\x90a\x1B\x19V[a\x10zV[\0[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xBB`\x04\x806\x03\x81\x01\x90a\x03\xB6\x91\x90a\x1A8V[a\x14\xB2V[\0[4\x80\x15a\x03\xC8W_\x80\xFD[Pa\x03\xE3`\x04\x806\x03\x81\x01\x90a\x03\xDE\x91\x90a\x1B\x90V[a\x14\xC4V[\0[`\x02` R\x81_R`@_ ` R\x80_R`@_ _\x91P\x91PP\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x80`\x02\x01T\x90\x80`\x03\x01T\x90\x80`\x04\x01T\x90P\x85V[`d\x81V[a\x04ma\x15HV[_`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x05CW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x06\xD7W_\x82`\x03\x01\x81\x90UP_\x82`\x04\x01\x81\x90UP\x80`\x03_\x82\x82Ta\x05v\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06oW=_\x80>=_\xFD[P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x81\0\xEF\x1B\x87\x8B\r\xEA\x0B]Mw\x90o\x85.\x9B\xC1\x08\x11[\xF7#\xDC\x05\xB6H/8\x16\xE2\xE0\x84`@Qa\x06\xCE\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA4[PPa\x06\xE1a\x15\x8EV[PPV[a\x06\xEDa\x15HV[_`\x02_\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x89\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x07\xC3W`@Q\x7F\x8E\xD1\xF9\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x04\x01T\x03a\x08\0W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'\x10`\x04T\x83`\x02\x01Ta\x08\x16\x91\x90a\x1C\x1BV[a\x08 \x91\x90a\x1C\x89V[\x90P_\x81\x83`\x02\x01Ta\x083\x91\x90a\x1B\xE8V[\x90P_\x82\x11\x80\x15a\x08pWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\xBAW\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x83\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x08\xB8W=_\x80>=_\xFD[P[_\x83`\x01\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T\x8D\x8D\x8D\x8D\x8D\x8D\x8D`@Q`$\x01a\t\x15\x97\x96\x95\x94\x93\x92\x91\x90a\x1D\"V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F>\xA6\xF2\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\t\x9F\x91\x90a\x1D\xF6V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\t\xD9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xDEV[``\x91P[PP\x90P\x83`\x02\x01T\x84`\x03\x01_\x82\x82Ta\t\xF9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83`\x04\x01_\x81T\x80\x92\x91\x90a\n\x14\x90a\x1E\x0CV[\x91\x90PUP_\x84`\x04\x01T\x03a\n\xD4W`\x02_\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x8C\x81R` \x01\x90\x81R` \x01_ _\x80\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x01\x82\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x02\x82\x01_\x90U`\x03\x82\x01_\x90U`\x04\x82\x01_\x90UPP[\x83`\x02\x01T`\x03_\x82\x82Ta\n\xE9\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x83_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8B\x8Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF4\xA67AfM4\xE3+\x8E\x8A\xD7i\xCC\\\x8B\x8B\xC9&\xA6s\x96(pX\xE8\x1F\x04\xA9I\x1A\x14\x88\x88`\x02\x01T\x88`@Qa\x0Bx\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPPa\x0B\x8Ca\x15\x8EV[PPPPPPPPV[a\x0B\x9Ea\x15HV[_`\x02_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x84\x81R` \x01\x90\x81R` \x01_ \x90P3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0CtW`@Q\x7FGA\x8D\xB1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x82`\x02\x01Ta\x0C\x85\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x0C\xC1W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x82`\x03\x01_\x82\x82Ta\x0C\xD4\x91\x90a\x1EhV[\x92PP\x81\x90UP\x82\x82`\x04\x01_\x82\x82Ta\x0C\xEE\x91\x90a\x1EhV[\x92PP\x81\x90UP\x80`\x03_\x82\x82Ta\r\x06\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x814a\r\x1A\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\riW3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\rgW=_\x80>=_\xFD[P[PPPa\rta\x15\x8EV[PPPV[a\r\x81a\x15\x97V[a'\x10\x81\x11\x15a\r\xBDW`@Q\x7F\x9C\xC7\r&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x04\x81\x90UPPV[`\x05T\x81V[a\r\xD5a\x15\x97V[a\r\xDE_a\x16\x1EV[V[`\x03T\x81V[a'\x10\x81V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[`\x04T\x81V[a\x0E!a\x15\x97V[a\x0E)a\x15HV[_G\x90P_`\x03T\x82a\x0E<\x91\x90a\x1B\xE8V[\x90P_\x81\x03a\x0EwW`@Q\x7F<\x80\xEB-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x7Fa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x0E\xC1W=_\x80>=_\xFD[Pa\x0E\xCAa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F@Y\x81\x9E\x9D\xAA`\xA4\x19\x7F3y\x8C\xA2\xBBdC\xC5\xFB\xB6|0\xAAO\n\xFE\xB7L\x1F\xBD\x0F\xA6\x82`@Qa\x0F\x0F\x91\x90a\x18\x87V[`@Q\x80\x91\x03\x90\xA2PPa\x0F!a\x15\x8EV[V[_\x80G\x90P`\x03T\x81\x11a\x0F7W_a\x0FFV[`\x03T\x81a\x0FE\x91\x90a\x1B\xE8V[[\x91PP\x90V[a\x0FTa\x16\xE6V[`\x02_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81R` \x01`\x04\x82\x01T\x81RPP\x90P\x92\x91PPV[a\x10\x82a\x15HV[`d\x81\x10\x15a\x10\xBDW`@Q\x7F6\xD9P\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81\x83a\x10\xCA\x91\x90a\x1C\x1BV[\x90P\x804\x10\x15a\x11\x06W`@Q\x7F\x0E\x1E\xDD\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x87\x81R` \x01\x90\x81R` \x01_ \x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12xW\x80`\x02\x01T\x84\x11a\x11\xE7W`@Q\x7F\x91\x86x\xCB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81`\x03\x01T\x90P_\x81\x11\x15a\x12vW\x80`\x03_\x82\x82Ta\x12\x08\x91\x90a\x1B\xE8V[\x92PP\x81\x90UP\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x12tW=_\x80>=_\xFD[P[P[`@Q\x80`\xA0\x01`@R\x803s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85\x81R` \x01\x83\x81R` \x01\x84\x81RP`\x02_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x88\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP` \x82\x01Q\x81`\x01\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01U`\x80\x82\x01Q\x81`\x04\x01U\x90PP\x81`\x03_\x82\x82Ta\x13\xD3\x91\x90a\x1EhV[\x92PP\x81\x90UP_\x824a\x13\xE7\x91\x90a\x1B\xE8V[\x90P_\x81\x11\x15a\x146W3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x08\xFC\x82\x90\x81\x15\x02\x90`@Q_`@Q\x80\x83\x03\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x144W=_\x80>=_\xFD[P[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xE80\x91\xAB\xE2\xD7m\xC8\x84\x19m\xF12\x80\xBDcK\xC7Vy\x93\x03\xFF(\xE2H\xAA\xCD5\x10\x89\xC6\x89\x89\x89`@Qa\x14\x98\x93\x92\x91\x90a\x1E3V[`@Q\x80\x91\x03\x90\xA4PPPa\x14\xABa\x15\x8EV[PPPPPV[a\x14\xBAa\x15\x97V[\x80`\x05\x81\x90UPPV[a\x14\xCCa\x15\x97V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x15<W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x153\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[a\x15E\x81a\x16\x1EV[PV[`\x02`\x01T\x03a\x15\x84W`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02`\x01\x81\x90UPV[`\x01\x80\x81\x90UPV[a\x15\x9Fa\x16\xDFV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\xBDa\r\xECV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x16\x1CWa\x15\xE0a\x16\xDFV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x13\x91\x90a\x1AcV[`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x81_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPV[_3\x90P\x90V[`@Q\x80`\xA0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[_\x80\xFD[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x17m\x82a\x17DV[\x90P\x91\x90PV[a\x17}\x81a\x17cV[\x81\x14a\x17\x87W_\x80\xFD[PV[_\x815\x90Pa\x17\x98\x81a\x17tV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x17\xB0\x81a\x17\x9EV[\x81\x14a\x17\xBAW_\x80\xFD[PV[_\x815\x90Pa\x17\xCB\x81a\x17\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x17\xE7Wa\x17\xE6a\x17<V[[_a\x17\xF4\x85\x82\x86\x01a\x17\x8AV[\x92PP` a\x18\x05\x85\x82\x86\x01a\x17\xBDV[\x91PP\x92P\x92\x90PV[a\x18\x18\x81a\x17cV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x180\x81a\x18\x1EV[\x82RPPV[_`\xA0\x82\x01\x90Pa\x18I_\x83\x01\x88a\x18\x0FV[a\x18V` \x83\x01\x87a\x18\x0FV[a\x18c`@\x83\x01\x86a\x18'V[a\x18p``\x83\x01\x85a\x18'V[a\x18}`\x80\x83\x01\x84a\x18'V[\x96\x95PPPPPPV[_` \x82\x01\x90Pa\x18\x9A_\x83\x01\x84a\x18'V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x18\xC1Wa\x18\xC0a\x18\xA0V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDEWa\x18\xDDa\x18\xA4V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x18\xFAWa\x18\xF9a\x18\xA8V[[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x19\x1DWa\x19\x1Ca\x17<V[[_a\x19*\x8B\x82\x8C\x01a\x17\x8AV[\x98PP` a\x19;\x8B\x82\x8C\x01a\x17\xBDV[\x97PP`@a\x19L\x8B\x82\x8C\x01a\x17\xBDV[\x96PP``a\x19]\x8B\x82\x8C\x01a\x17\xBDV[\x95PP`\x80a\x19n\x8B\x82\x8C\x01a\x17\xBDV[\x94PP`\xA0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x8FWa\x19\x8Ea\x17@V[[a\x19\x9B\x8B\x82\x8C\x01a\x18\xACV[\x93P\x93PP`\xC0a\x19\xAE\x8B\x82\x8C\x01a\x17\x8AV[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[a\x19\xC7\x81a\x18\x1EV[\x81\x14a\x19\xD1W_\x80\xFD[PV[_\x815\x90Pa\x19\xE2\x81a\x19\xBEV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x19\xFFWa\x19\xFEa\x17<V[[_a\x1A\x0C\x86\x82\x87\x01a\x17\x8AV[\x93PP` a\x1A\x1D\x86\x82\x87\x01a\x17\xBDV[\x92PP`@a\x1A.\x86\x82\x87\x01a\x19\xD4V[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x1AMWa\x1ALa\x17<V[[_a\x1AZ\x84\x82\x85\x01a\x19\xD4V[\x91PP\x92\x91PPV[_` \x82\x01\x90Pa\x1Av_\x83\x01\x84a\x18\x0FV[\x92\x91PPV[a\x1A\x85\x81a\x17cV[\x82RPPV[a\x1A\x94\x81a\x18\x1EV[\x82RPPV[`\xA0\x82\x01_\x82\x01Qa\x1A\xAE_\x85\x01\x82a\x1A|V[P` \x82\x01Qa\x1A\xC1` \x85\x01\x82a\x1A|V[P`@\x82\x01Qa\x1A\xD4`@\x85\x01\x82a\x1A\x8BV[P``\x82\x01Qa\x1A\xE7``\x85\x01\x82a\x1A\x8BV[P`\x80\x82\x01Qa\x1A\xFA`\x80\x85\x01\x82a\x1A\x8BV[PPPPV[_`\xA0\x82\x01\x90Pa\x1B\x13_\x83\x01\x84a\x1A\x9AV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x1B2Wa\x1B1a\x17<V[[_a\x1B?\x88\x82\x89\x01a\x17\x8AV[\x95PP` a\x1BP\x88\x82\x89\x01a\x17\xBDV[\x94PP`@a\x1Ba\x88\x82\x89\x01a\x17\x8AV[\x93PP``a\x1Br\x88\x82\x89\x01a\x19\xD4V[\x92PP`\x80a\x1B\x83\x88\x82\x89\x01a\x19\xD4V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_` \x82\x84\x03\x12\x15a\x1B\xA5Wa\x1B\xA4a\x17<V[[_a\x1B\xB2\x84\x82\x85\x01a\x17\x8AV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1B\xF2\x82a\x18\x1EV[\x91Pa\x1B\xFD\x83a\x18\x1EV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1C\x15Wa\x1C\x14a\x1B\xBBV[[\x92\x91PPV[_a\x1C%\x82a\x18\x1EV[\x91Pa\x1C0\x83a\x18\x1EV[\x92P\x82\x82\x02a\x1C>\x81a\x18\x1EV[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x1CUWa\x1CTa\x1B\xBBV[[P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_a\x1C\x93\x82a\x18\x1EV[\x91Pa\x1C\x9E\x83a\x18\x1EV[\x92P\x82a\x1C\xAEWa\x1C\xADa\x1C\\V[[\x82\x82\x04\x90P\x92\x91PPV[a\x1C\xC2\x81a\x17\x9EV[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x1D\x01\x83\x85a\x1C\xC8V[\x93Pa\x1D\x0E\x83\x85\x84a\x1C\xD8V[a\x1D\x17\x83a\x1C\xE6V[\x84\x01\x90P\x93\x92PPPV[_`\xC0\x82\x01\x90Pa\x1D5_\x83\x01\x8Aa\x18\x0FV[a\x1DB` \x83\x01\x89a\x1C\xB9V[a\x1DO`@\x83\x01\x88a\x1C\xB9V[a\x1D\\``\x83\x01\x87a\x1C\xB9V[a\x1Di`\x80\x83\x01\x86a\x1C\xB9V[\x81\x81\x03`\xA0\x83\x01Ra\x1D|\x81\x84\x86a\x1C\xF6V[\x90P\x98\x97PPPPPPPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_[\x83\x81\x10\x15a\x1D\xBBW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xA0V[_\x84\x84\x01RPPPPV[_a\x1D\xD0\x82a\x1D\x8AV[a\x1D\xDA\x81\x85a\x1D\x94V[\x93Pa\x1D\xEA\x81\x85` \x86\x01a\x1D\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1E\x01\x82\x84a\x1D\xC6V[\x91P\x81\x90P\x92\x91PPV[_a\x1E\x16\x82a\x18\x1EV[\x91P_\x82\x03a\x1E(Wa\x1E'a\x1B\xBBV[[`\x01\x82\x03\x90P\x91\x90PV[_``\x82\x01\x90Pa\x1EF_\x83\x01\x86a\x18\x0FV[a\x1ES` \x83\x01\x85a\x18'V[a\x1E``@\x83\x01\x84a\x18'V[\x94\x93PPPPV[_a\x1Er\x82a\x18\x1EV[\x91Pa\x1E}\x83a\x18\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\x95Wa\x1E\x94a\x1B\xBBV[[\x92\x91PPV\xFE\xA2dipfsX\"\x12 z\xAB\x91f\x8E\x1A#\x97\x04\xDA\xEB\xEF/\xC2\xFCiG\xC8:\xAE\xC0\xFCiBh9\xDC15OM'dsolcC\0\x08\x14\x003\xA2dipfsX\"\x12 \xBCC\xE4;\xE9\xD0o\xECL\x01\x06\xCA\xC8\xAAO\x87\xFF\xBBz\xB7\xF6\xE2Y\xD5\xA0\xEA=-\xAE\xAE\x8A\xA8dsolcC\0\x08\x14\x003",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `HooksAuctionDeployed(address,address,bytes32,string)` and selector `0x87f4ece9f8fcc6240c365696a7e5e5292ba98b44ddd1704ba589f3bf2e62e821`.
```solidity
event HooksAuctionDeployed(address indexed auction, address indexed deployer, bytes32 salt, string version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct HooksAuctionDeployed {
        #[allow(missing_docs)]
        pub auction: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub deployer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for HooksAuctionDeployed {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::String,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "HooksAuctionDeployed(address,address,bytes32,string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                135u8, 244u8, 236u8, 233u8, 248u8, 252u8, 198u8, 36u8, 12u8, 54u8, 86u8,
                150u8, 167u8, 229u8, 229u8, 41u8, 43u8, 169u8, 139u8, 68u8, 221u8, 209u8,
                112u8, 75u8, 165u8, 137u8, 243u8, 191u8, 46u8, 98u8, 232u8, 33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    auction: topics.1,
                    deployer: topics.2,
                    salt: data.0,
                    version: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.auction.clone(),
                    self.deployer.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.auction,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.deployer,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for HooksAuctionDeployed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&HooksAuctionDeployed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &HooksAuctionDeployed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `computeAddress(bytes32)` and selector `0x7fde56da`.
```solidity
function computeAddress(bytes32 salt) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeAddressCall {
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`computeAddress(bytes32)`](computeAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeAddressCall> for UnderlyingRustTuple<'_> {
                fn from(value: computeAddressCall) -> Self {
                    (value.salt,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for computeAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { salt: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeAddress(bytes32)";
            const SELECTOR: [u8; 4] = [127u8, 222u8, 86u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: computeAddressReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: computeAddressReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deployAuction(bytes32,string)` and selector `0xd949c3af`.
```solidity
function deployAuction(bytes32 salt, string memory version) external returns (address auction);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployAuctionCall {
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`deployAuction(bytes32,string)`](deployAuctionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployAuctionReturn {
        #[allow(missing_docs)]
        pub auction: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployAuctionCall> for UnderlyingRustTuple<'_> {
                fn from(value: deployAuctionCall) -> Self {
                    (value.salt, value.version)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deployAuctionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        salt: tuple.0,
                        version: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployAuctionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: deployAuctionReturn) -> Self {
                    (value.auction,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deployAuctionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { auction: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployAuctionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployAuction(bytes32,string)";
            const SELECTOR: [u8; 4] = [217u8, 73u8, 195u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: deployAuctionReturn = r.into();
                        r.auction
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: deployAuctionReturn = r.into();
                        r.auction
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deployedAuctions(bytes32)` and selector `0x8bb93e5d`.
```solidity
function deployedAuctions(bytes32) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployedAuctionsCall(pub alloy::sol_types::private::FixedBytes<32>);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`deployedAuctions(bytes32)`](deployedAuctionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployedAuctionsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployedAuctionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployedAuctionsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployedAuctionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployedAuctionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployedAuctionsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployedAuctionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployedAuctionsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployedAuctions(bytes32)";
            const SELECTOR: [u8; 4] = [139u8, 185u8, 62u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: deployedAuctionsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: deployedAuctionsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `generateSalt(address,string)` and selector `0xe4563c83`.
```solidity
function generateSalt(address deployer, string memory version) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct generateSaltCall {
        #[allow(missing_docs)]
        pub deployer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`generateSalt(address,string)`](generateSaltCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct generateSaltReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<generateSaltCall> for UnderlyingRustTuple<'_> {
                fn from(value: generateSaltCall) -> Self {
                    (value.deployer, value.version)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for generateSaltCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deployer: tuple.0,
                        version: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<generateSaltReturn> for UnderlyingRustTuple<'_> {
                fn from(value: generateSaltReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for generateSaltReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for generateSaltCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "generateSalt(address,string)";
            const SELECTOR: [u8; 4] = [228u8, 86u8, 60u8, 131u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.deployer,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: generateSaltReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: generateSaltReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`HooksPerpetualAuctionFactory`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum HooksPerpetualAuctionFactoryCalls {
        #[allow(missing_docs)]
        computeAddress(computeAddressCall),
        #[allow(missing_docs)]
        deployAuction(deployAuctionCall),
        #[allow(missing_docs)]
        deployedAuctions(deployedAuctionsCall),
        #[allow(missing_docs)]
        generateSalt(generateSaltCall),
    }
    #[automatically_derived]
    impl HooksPerpetualAuctionFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [127u8, 222u8, 86u8, 218u8],
            [139u8, 185u8, 62u8, 93u8],
            [217u8, 73u8, 195u8, 175u8],
            [228u8, 86u8, 60u8, 131u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HooksPerpetualAuctionFactoryCalls {
        const NAME: &'static str = "HooksPerpetualAuctionFactoryCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::computeAddress(_) => {
                    <computeAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployAuction(_) => {
                    <deployAuctionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployedAuctions(_) => {
                    <deployedAuctionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::generateSalt(_) => {
                    <generateSaltCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls>] = &[
                {
                    fn computeAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <computeAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::computeAddress)
                    }
                    computeAddress
                },
                {
                    fn deployedAuctions(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <deployedAuctionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::deployedAuctions)
                    }
                    deployedAuctions
                },
                {
                    fn deployAuction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <deployAuctionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::deployAuction)
                    }
                    deployAuction
                },
                {
                    fn generateSalt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <generateSaltCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::generateSalt)
                    }
                    generateSalt
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls>] = &[
                {
                    fn computeAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <computeAddressCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::computeAddress)
                    }
                    computeAddress
                },
                {
                    fn deployedAuctions(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <deployedAuctionsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::deployedAuctions)
                    }
                    deployedAuctions
                },
                {
                    fn deployAuction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <deployAuctionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::deployAuction)
                    }
                    deployAuction
                },
                {
                    fn generateSalt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HooksPerpetualAuctionFactoryCalls> {
                        <generateSaltCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HooksPerpetualAuctionFactoryCalls::generateSalt)
                    }
                    generateSalt
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::computeAddress(inner) => {
                    <computeAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployAuction(inner) => {
                    <deployAuctionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployedAuctions(inner) => {
                    <deployedAuctionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::generateSalt(inner) => {
                    <generateSaltCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::computeAddress(inner) => {
                    <computeAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployAuction(inner) => {
                    <deployAuctionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployedAuctions(inner) => {
                    <deployedAuctionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::generateSalt(inner) => {
                    <generateSaltCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HooksPerpetualAuctionFactory`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HooksPerpetualAuctionFactoryEvents {
        #[allow(missing_docs)]
        HooksAuctionDeployed(HooksAuctionDeployed),
    }
    #[automatically_derived]
    impl HooksPerpetualAuctionFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                135u8, 244u8, 236u8, 233u8, 248u8, 252u8, 198u8, 36u8, 12u8, 54u8, 86u8,
                150u8, 167u8, 229u8, 229u8, 41u8, 43u8, 169u8, 139u8, 68u8, 221u8, 209u8,
                112u8, 75u8, 165u8, 137u8, 243u8, 191u8, 46u8, 98u8, 232u8, 33u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for HooksPerpetualAuctionFactoryEvents {
        const NAME: &'static str = "HooksPerpetualAuctionFactoryEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <HooksAuctionDeployed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <HooksAuctionDeployed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::HooksAuctionDeployed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for HooksPerpetualAuctionFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::HooksAuctionDeployed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::HooksAuctionDeployed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HooksPerpetualAuctionFactory`](self) contract instance.

See the [wrapper's documentation](`HooksPerpetualAuctionFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HooksPerpetualAuctionFactoryInstance<P, N> {
        HooksPerpetualAuctionFactoryInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HooksPerpetualAuctionFactoryInstance<P, N>>,
    > {
        HooksPerpetualAuctionFactoryInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        HooksPerpetualAuctionFactoryInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`HooksPerpetualAuctionFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HooksPerpetualAuctionFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HooksPerpetualAuctionFactoryInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for HooksPerpetualAuctionFactoryInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HooksPerpetualAuctionFactoryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionFactoryInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`HooksPerpetualAuctionFactory`](self) contract instance.

See the [wrapper's documentation](`HooksPerpetualAuctionFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HooksPerpetualAuctionFactoryInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> HooksPerpetualAuctionFactoryInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HooksPerpetualAuctionFactoryInstance<P, N> {
            HooksPerpetualAuctionFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionFactoryInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`computeAddress`] function.
        pub fn computeAddress(
            &self,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, computeAddressCall, N> {
            self.call_builder(&computeAddressCall { salt })
        }
        ///Creates a new call builder for the [`deployAuction`] function.
        pub fn deployAuction(
            &self,
            salt: alloy::sol_types::private::FixedBytes<32>,
            version: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, deployAuctionCall, N> {
            self.call_builder(&deployAuctionCall { salt, version })
        }
        ///Creates a new call builder for the [`deployedAuctions`] function.
        pub fn deployedAuctions(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, deployedAuctionsCall, N> {
            self.call_builder(&deployedAuctionsCall(_0))
        }
        ///Creates a new call builder for the [`generateSalt`] function.
        pub fn generateSalt(
            &self,
            deployer: alloy::sol_types::private::Address,
            version: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, generateSaltCall, N> {
            self.call_builder(
                &generateSaltCall {
                    deployer,
                    version,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HooksPerpetualAuctionFactoryInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`HooksAuctionDeployed`] event.
        pub fn HooksAuctionDeployed_filter(
            &self,
        ) -> alloy_contract::Event<&P, HooksAuctionDeployed, N> {
            self.event_filter::<HooksAuctionDeployed>()
        }
    }
}
